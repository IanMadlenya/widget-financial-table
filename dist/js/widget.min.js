var WIDGET_COMMON_CONFIG={STORE_URL:"https://store-dot-rvaserver2.appspot.com/",AUTH_PATH_URL:"v1/widget/auth"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function t(t,e){var a="font-family:"+e.font.family+"; ",n="color: "+e.color+"; ",i="font-size: "+e.size+"px; ",o="font-weight: "+(e.bold?"bold":"normal")+"; ",r="font-style: "+(e.italic?"italic":"normal")+"; ",s="text-decoration: "+(e.underline?"underline":"none")+"; ",l="background-color: "+e.highlightColor+"; ";return"."+t+" {"+a+n+i+o+r+s+l+"}"}function e(t){for(var e=document.createElement("style"),a=0,n=t.length;n>a;a++)e.appendChild(document.createTextNode(t[a]));document.head.appendChild(e)}function a(a,o){a.forEach(function(a){a.class&&a.fontSetting&&e([t(a.class,a.fontSetting)]),a.fontSetting.font.type&&("custom"===a.fontSetting.font.type&&a.fontSetting.font.family&&a.fontSetting.font.url?n(a.fontSetting.font.family,a.fontSetting.font.url,o):"google"===a.fontSetting.font.type&&a.fontSetting.font.family&&i(a.fontSetting.font.family,o))})}function n(t,e,a){var n=null,i="font-family: "+t+"; src: url('"+e+"');";a=a||document,n=a.styleSheets[0],null!==n&&n.addRule("@font-face",i)}function i(t,e){var a=document.createElement("link");e=e||document,a.setAttribute("rel","stylesheet"),a.setAttribute("type","text/css"),a.setAttribute("href","https://fonts.googleapis.com/css?family="+t),null!==a&&e.getElementsByTagName("head")[0].appendChild(a)}return{getFontCssStyle:t,addCSSRules:e,loadFonts:a,loadCustomFont:n,loadGoogleFont:i}}();var CollectionTimes=function(){function t(){function t(a,n){var i,o=6e4,r=new RiseVision.Common.Visualization;collectionTimesTimer=setTimeout(function(){t(a,n)},o),i={url:"http://contentfinancial2.appspot.com/info?codes="+a,refreshInterval:0,queryString:"select startTime, endTime, daysOfWeek, timeZoneOffset, updateInterval",callback:function(t,i){r=null,null!==t?(clearTimeout(i),e(a,t),n()):console.log("Error encountered loading collection times for: "+a)},params:collectionTimesTimer},r.getData(i)}function e(t,e){var n,i,o,r;if(null!==e){n=e.getNumberOfRows();for(var s=0;s<a.length;s++)if(a[s].instrument===t){r=e.getValue(0,3),i=e.getValue(0,0),o=e.getValue(0,1),a[s].collectionTimes={instrument:t,startTime:i.setTimezoneOffset(r),endTime:o.setTimezoneOffset(r),daysOfWeek:e.getFormattedValue(0,2).split(","),timeZoneOffset:r,isUpdated:!0};break}}}return{setIsUpdated:function(t,e){for(var n=0;n<a.length;n++)a[n].instrument===t&&null!==a[n].collectionTimes&&(a[n].collectionTimes.isUpdated=e)},addInstrument:function(e,n,i){for(var o=0,r=!1,s=!1;o<a.length;o++)if(a[o].instrument===e){null!==a[o].collectionTimes&&(Date.equals(Date.today(),n)||a[o].collectionTimes.isUpdated||(n=Date.today(),a[o].collectionTimes.startTime.addDays(1),a[o].collectionTimes.endTime.addDays(1),a[o].collectionTimes.isUpdated=!0),s=!0),r=!0;break}s?i(a[o].collectionTimes,n):(r||a.push({instrument:e,collectionTimes:null}),t(e,function(){i(a[o].collectionTimes,n)}))}}}var e=!1,a=[];return{getInstance:function(){return e||(e=t()),e}}}(),RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Financial=RiseVision.Common.Financial||{},RiseVision.Common.Financial.Helper={},RiseVision.Common.Financial.Helper=function(t){this.instruments=t},RiseVision.Common.Financial.Helper.prototype.setInstruments=function(t){this.instruments=t},RiseVision.Common.Financial.Helper.prototype.getInstruments=function(t,e){var a=this;if(t)return this.instruments.join("|");var n=(new Date).getDay(),i=e.length,o=[];return $.each(this.instruments,function(t,r){for(var s=0;i>s;s++)if(r===e[s].instrument){var l=e[s].startTime,u=e[s].endTime,c=e[s].daysOfWeek;$.each(c,function(e,i){return i==n?((new Date).between(l,u)&&o.push(a.instruments[t]),!1):void 0})}}),o.join("|")};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Financial=RiseVision.Common.Financial||{},RiseVision.Common.Financial.Historical={},RiseVision.Common.Financial.Historical.CollectionTimes={},RiseVision.Common.Financial.Historical=function(t,e,a){this.displayID=t?t:"preview",this.instrument=e,this.duration=a,this.isLoading=!0,this.updateInterval=6e4,this.now=Date.today(),this.url="https://contentfinancial2.appspot.com/data/historical?",this.historicalViz=new RiseVision.Common.Visualization,this.helper=new RiseVision.Common.Financial.Helper([this.instrument])},RiseVision.Common.Financial.Historical.prototype.setInstrument=function(t){this.isLoading=!0,this.instrument=t,this.helper.setInstruments([this.instrument])},RiseVision.Common.Financial.Historical.prototype.setDuration=function(t){this.duration=t},RiseVision.Common.Financial.Historical.prototype.setIsUpdated=function(t){CollectionTimes.getInstance().setIsUpdated(this.instrument,t)},RiseVision.Common.Financial.Historical.prototype.getHistoricalData=function(t,e,a){var n=this,i="select "+t.join()+" ORDER BY tradeTime",o="";a&&(a.sortOrder&&"desc"===a.sortOrder&&(i+=" desc"),a.limit&&(i+=" LIMIT "+a.limit)),CollectionTimes.getInstance().addInstrument(this.instrument,this.now,function(r,s){n.now=s,o=n.helper.getInstruments(n.isLoading,[r]),o?(a={url:n.url+"id="+n.displayID+"&code="+n.instrument+"&kind="+n.duration,refreshInterval:0,queryString:i,callback:function(t){n.onHistoricalDataLoaded(t,r,e)}},n.getHistoricalDataTimer=setTimeout(function(){n.getHistoricalData(t,e,a)},n.updateInterval),n.historicalViz.getData(a)):e(null)})},RiseVision.Common.Financial.Historical.prototype.onHistoricalDataLoaded=function(t,e,a){var n=0;null!==t?(clearTimeout(this.getHistoricalDataTimer),this.historicalData=t,n=t.getNumberOfRows(),this.isLoading=0===n||1===n&&"0"===t.getFormattedValue(0,0)?!0:!1,null!==this.historicalData?a({data:this.historicalData,collectionData:e}):a({collectionData:e})):(console.log("Error encountered loading historical data for: "),console.log(this))};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Financial=RiseVision.Common.Financial||{},RiseVision.Common.Financial.RealTime={},RiseVision.Common.Financial.RealTime=function(t,e,a){this.instruments=e,this.isLoading=!0,this.conditions={},this.collectionTimes=[],this.updateInterval=6e4,this.now=Date.today(),this.url="https://contentfinancial2.appspot.com/data?",this.logosURL="https://s3.amazonaws.com/risecontentlogos/financial/",this.viz=new RiseVision.Common.Visualization,this.helper=new RiseVision.Common.Financial.Helper(this.instruments),this._getDisplayId=function(){return t&&a.isAuthorized()?t:"preview"},this._saveCollectionTimes=function(){var t;if(t=this.data.getNumberOfRows(),1===this.instruments.length&&this.data.getNumberOfRows()>1)this._saveCollectionTime(0);else{for(var e=0;t>e;e++)this._saveCollectionTime(e);0===this.collectionTimes.length&&console.log(this.collectionTimes)}},this._saveCollectionTime=function(t){"INVALID_SYMBOL"!==this.data.getValue(t,0)&&("..."===this.data.getValue(t,0)?this.isLoading=!0:(timeZoneOffset=this.data.getValue(t,this.startTimeIndex+3),startTime=this.data.getValue(t,this.startTimeIndex),endTime=this.data.getValue(t,this.startTimeIndex+1),startTime&&endTime&&"N/P"!==timeZoneOffset&&this.collectionTimes.push({instrument:this.instruments[t],startTime:startTime.setTimezoneOffset(timeZoneOffset),endTime:endTime.setTimezoneOffset(timeZoneOffset),daysOfWeek:this.data.getFormattedValue(t,this.startTimeIndex+2).split(",")})))}},RiseVision.Common.Financial.RealTime.prototype.setInstruments=function(t){t=t.split(","),$.each(t,function(e){t[e]=$.trim(t[e])}),this.isLoading=!0,this.collectionTimes=[],this.instruments=t,this.helper.setInstruments(this.instruments)},RiseVision.Common.Financial.RealTime.prototype.getData=function(t,e,a,n){var i=this,o=!1,r=0,s="select instrument",l="";if(this.dataFields={},this.dataFields.instrument=0,this.startTimeIndex=1,this.isLoading&&(this.callback=n),$.each(t,function(t,e){o=!1,"instrument"===e||($.each(i.dataFields,function(t){return t===e?(o=!0,!1):void 0}),o||(s+=", "+e,i.dataFields[e]=r+1,r++,i.startTimeIndex++))}),this.logoCount=0,s+=", startTime, endTime, daysOfWeek, timeZoneOffset",!Date.equals(Date.today(),this.now)){this.now=Date.today();for(var u=0;u<this.collectionTimes.length;u++)this.collectionTimes[u].startTime.addDays(1),this.collectionTimes[u].endTime.addDays(1)}if(l=this.helper.getInstruments(this.isLoading,this.collectionTimes)){var c={url:this.url+"id="+this._getDisplayId()+"&codes="+l,refreshInterval:0,queryString:s,callback:function(t){i.onRealTimeDataLoaded(t,e,a)}};this.getDataTimer=setTimeout(function(){i.getData(t,e,a,n)},this.updateInterval),this.viz.getData(c)}else n(null)},RiseVision.Common.Financial.RealTime.prototype.onRealTimeDataLoaded=function(t,e,a){null!==t?(clearTimeout(this.getDataTimer),this.data=t,this.isLoading?(this.isLoading=!1,0===this.collectionTimes.length&&this._saveCollectionTimes(),e?this.loadLogos():this.callback&&this.callback(this.data,this.logoURLs)):e&&a?this.loadLogos():this.callback&&this.callback(this.data,this.logoURLs)):(console.log("Error encountered loading real-time data for: "),console.log(this.instruments[0]))},RiseVision.Common.Financial.RealTime.prototype.loadLogos=function(){var t=this.data.getNumberOfRows();this.logoCount=0,this.urls=[],this.logoURLs=[];for(var e=0;t>e;e++)this.urls.push(this.logosURL+this.data.getFormattedValue(e,0)+".svg");this.loadLogo(this.urls.length)},RiseVision.Common.Financial.RealTime.prototype.loadLogo=function(t){var e,a=this;e=new Image,e.onload=function(){a.logoURLs.push(e.src),a.onLogoLoaded(t)},e.onerror=function(){a.logoURLs.push(null),a.onLogoLoaded(t)},e.src=this.urls[this.logoCount]},RiseVision.Common.Financial.RealTime.prototype.onLogoLoaded=function(t){this.logoCount++,t--,0===t?this.callback&&this.callback(this.data,this.logoURLs):this.loadLogo(t)},RiseVision.Common.Financial.RealTime.prototype.checkSigns=function(t){var e,a,n=0,i=[];for(n=0,numRows=this.data.getNumberOfRows();numRows>n;n++)e=this.data.getValue(n,this.dataFields[t]),isNaN(e)&&(e=e.replace(/[^0-9\.-]+/g,""),e=parseFloat(e)),isNaN(e)||(a=e>=0?1:-1,i.push(a));return i},RiseVision.Common.Financial.RealTime.prototype.compare=function(t){var e=this,a=0,n=0,i=[],o=!1;if(this.conditions[t])for(row=0,numRows=this.data.getNumberOfRows();numRows>row;row++)a=this.data.getValue(row,this.dataFields[t]),o=!1,$.each(this.conditions[t],function(t,r){return r.instrument===e.data.getValue(row,0)?(n=r.value,isNaN(a)&&(a=a.replace(/[^0-9\.-]+/g,""),a=parseFloat(a)),isNaN(n)&&(n=n.replace(/[^0-9\.-]+/g,""),n=parseFloat(n)),isNaN(a)||isNaN(n)||(a!=n?a>n?i.push(1):i.push(-1):i.push(0)),o=!0,!1):void 0}),o||i.push(0);return this.saveBeforeValues([t]),i},RiseVision.Common.Financial.RealTime.prototype.saveBeforeValues=function(t){var e=this;$.each(t,function(t,a){e.conditions[a]=[],e.saveBeforeValue(a,e.dataFields[a])})},RiseVision.Common.Financial.RealTime.prototype.saveBeforeValue=function(t,e){for(var a=0,n=this.data.getNumberOfRows();n>a;a++)this.conditions[t].push({instrument:this.data.getValue(a,0),value:this.data.getValue(a,e)})};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Visualization={},RiseVision.Common.Visualization=function(){this.query=null,this.isVisualizationLoaded=!1},RiseVision.Common.Visualization.prototype.getData=function(t){this.url=t.url,this.refreshInterval=t.refreshInterval,this.timeout=t.timeout||30,this.callback=t.callback,this.params=t.params,t.queryString&&(this.queryString=t.queryString),this.isVisualizationLoaded?this.sendQuery():this.loadVisualizationAPI()},RiseVision.Common.Visualization.prototype.loadVisualizationAPI=function(){var t=this;google.load("visualization","1",{callback:function(){t.isVisualizationLoaded=!0,t.sendQuery()}})},RiseVision.Common.Visualization.prototype.sendQuery=function(){var t=this;null!==this.query&&this.query.abort(),this.query=new google.visualization.Query(this.url),this.query.setRefreshInterval(this.refreshInterval),this.query.setTimeout(this.timeout),this.queryString&&this.query.setQuery(this.queryString),this.query.send(function(e){t.onQueryExecuted(e)})},RiseVision.Common.Visualization.prototype.onQueryExecuted=function(t){null===t?this.callback(t,this.params):t.isError()?(console.log("Message: "+t.getMessage()),console.log("Detailed message: "+t.getDetailedMessage()),console.log("Reasons: "+t.getReasons()),this.callback(null,this.params)):this.callback(t.getDataTable(),this.params)};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Store=RiseVision.Common.Store||{},RiseVision.Common.Store.Auth={},RiseVision.Common.Store.Auth=function(){function t(t){a=document.createElement("div"),a.className="overlay",document.body.appendChild(a),n=document.createElement("div"),n.className="auth-warning",n.innerHTML=t,n=document.body.appendChild(n)}function e(){a&&n&&(n.parentNode.removeChild(n),a.parentNode.removeChild(a))}var a,n,i=36e5;this.callback=null,this.authorized=!1,this.isAuthorized=function(){return this.authorized},this.checkForDisplay=function(t,e,a){this.callback=a,this.url=WIDGET_COMMON_CONFIG.STORE_URL+WIDGET_COMMON_CONFIG.AUTH_PATH_URL+"?id="+t+"&pc="+e,this.callApi()},this.checkForCompany=function(t,e,a){this.callback=a,this.url=WIDGET_COMMON_CONFIG.STORE_URL+WIDGET_COMMON_CONFIG.AUTH_PATH_URL+"?cid="+t+"&pc="+e,this.callApi()},this.callApi=function(){var t=this;$.ajax({dataType:"json",url:this.url,success:function(e,a){t.onSuccess(e,a)},error:function(){t.onError()}})},this.onSuccess=function(a){if(a&&a.authorized){this.authorized=!0,e();var n=new Date(a.expiry).getTime()-(new Date).getTime()-i;setTimeout(this.callApi,n)}else a&&!a.authorized?(this.authorized=!1,t("Product not authorized."),setTimeout(this.callApi,i)):setTimeout(this.callApi,i);this.callback&&this.callback(this.authorized)},this.onError=function(){this.authorized=!1,t("Cannot connect to Store for authorization."),setTimeout(this.callApi,i),this.callback&&this.callback(this.authorized)}},function(t,e,a){!function(t){"use strict";"function"==typeof define&&define.amd?define("datatables",["jquery"],t):"object"==typeof exports?t(require("jquery")):jQuery&&!jQuery.fn.dataTable&&t(jQuery)}(function(n){"use strict";function i(t){var e,a,o="a aa ai ao as b fn i m o s ",r={};n.each(t,function(n){e=n.match(/^([^A-Z]+?)([A-Z])/),e&&-1!==o.indexOf(e[1]+" ")&&(a=n.replace(e[0],e[2].toLowerCase()),r[a]=n,"o"===e[1]&&i(t[n]))}),t._hungarianMap=r}function o(t,e,r){t._hungarianMap||i(t);var s;n.each(e,function(i){s=t._hungarianMap[i],s===a||!r&&e[s]!==a||("o"===s.charAt(0)?(e[s]||(e[s]={}),n.extend(!0,e[s],e[i]),o(t[s],e[s],r)):e[s]=e[i])})}function r(t){var e=Ge.defaults.oLanguage,a=t.sZeroRecords;!t.sEmptyTable&&a&&"No data available in table"===e.sEmptyTable&&$e(t,t,"sZeroRecords","sEmptyTable"),!t.sLoadingRecords&&a&&"Loading..."===e.sLoadingRecords&&$e(t,t,"sZeroRecords","sLoadingRecords"),t.sInfoThousands&&(t.sThousands=t.sInfoThousands);var n=t.sDecimal;n&&ze(n)}function s(t){ba(t,"ordering","bSort"),ba(t,"orderMulti","bSortMulti"),ba(t,"orderClasses","bSortClasses"),ba(t,"orderCellsTop","bSortCellsTop"),ba(t,"order","aaSorting"),ba(t,"orderFixed","aaSortingFixed"),ba(t,"paging","bPaginate"),ba(t,"pagingType","sPaginationType"),ba(t,"pageLength","iDisplayLength"),ba(t,"searching","bFilter");var e=t.aoSearchCols;if(e)for(var a=0,n=e.length;n>a;a++)e[a]&&o(Ge.models.oSearch,e[a])}function l(t){ba(t,"orderable","bSortable"),ba(t,"orderData","aDataSort"),ba(t,"orderSequence","asSorting"),ba(t,"orderDataType","sortDataType")}function u(t){var e=t.oBrowser,a=n("<div/>").css({position:"absolute",top:0,left:0,height:1,width:1,overflow:"hidden"}).append(n("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(n('<div class="test"/>').css({width:"100%",height:10}))).appendTo("body"),i=a.find(".test");e.bScrollOversize=100===i[0].offsetWidth,e.bScrollbarLeft=1!==i.offset().left,a.remove()}function c(t,e,n,i,o,r){var s,l=i,u=!1;for(n!==a&&(s=n,u=!0);l!==o;)t.hasOwnProperty(l)&&(s=u?e(s,t[l],l,t):t[l],u=!0,l+=r);return s}function d(t,a){var i=Ge.defaults.column,o=t.aoColumns.length,r=n.extend({},Ge.models.oColumn,i,{nTh:a?a:e.createElement("th"),sTitle:i.sTitle?i.sTitle:a?a.innerHTML:"",aDataSort:i.aDataSort?i.aDataSort:[o],mData:i.mData?i.mData:o,idx:o});t.aoColumns.push(r);var s=t.aoPreSearchCols;s[o]=n.extend({},Ge.models.oSearch,s[o]),h(t,o,null)}function h(t,e,i){var r=t.aoColumns[e],s=t.oClasses,u=n(r.nTh);if(!r.sWidthOrig){r.sWidthOrig=u.attr("width")||null;var c=(u.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);c&&(r.sWidthOrig=c[1])}i!==a&&null!==i&&(l(i),o(Ge.defaults.column,i),i.mDataProp===a||i.mData||(i.mData=i.mDataProp),i.sType&&(r._sManualType=i.sType),i.className&&!i.sClass&&(i.sClass=i.className),n.extend(r,i),$e(r,i,"sWidth","sWidthOrig"),"number"==typeof i.iDataSort&&(r.aDataSort=[i.iDataSort]),$e(r,i,"aDataSort"));var d=r.mData,h=R(d),f=r.mRender?R(r.mRender):null,p=function(t){return"string"==typeof t&&-1!==t.indexOf("@")};r._bAttrSrc=n.isPlainObject(d)&&(p(d.sort)||p(d.type)||p(d.filter)),r.fnGetData=function(t,e,n){var i=h(t,e,a,n);return f&&e?f(i,e,t,n):i},r.fnSetData=function(t,e,a){return I(d)(t,e,a)},t.oFeatures.bSort||(r.bSortable=!1,u.addClass(s.sSortableNone));var g=-1!==n.inArray("asc",r.asSorting),m=-1!==n.inArray("desc",r.asSorting);r.bSortable&&(g||m)?g&&!m?(r.sSortingClass=s.sSortableAsc,r.sSortingClassJUI=s.sSortJUIAscAllowed):!g&&m?(r.sSortingClass=s.sSortableDesc,r.sSortingClassJUI=s.sSortJUIDescAllowed):(r.sSortingClass=s.sSortable,r.sSortingClassJUI=s.sSortJUI):(r.sSortingClass=s.sSortableNone,r.sSortingClassJUI="")}function f(t){if(t.oFeatures.bAutoWidth!==!1){var e=t.aoColumns;ve(t);for(var a=0,n=e.length;n>a;a++)e[a].nTh.style.width=e[a].sWidth}var i=t.oScroll;(""!==i.sY||""!==i.sX)&&me(t),Ee(t,null,"column-sizing",[t])}function p(t,e){var a=b(t,"bVisible");return"number"==typeof a[e]?a[e]:null}function g(t,e){var a=b(t,"bVisible"),i=n.inArray(e,a);return-1!==i?i:null}function m(t){return b(t,"bVisible").length}function b(t,e){var a=[];return n.map(t.aoColumns,function(t,n){t[e]&&a.push(n)}),a}function v(t){var e,n,i,o,r,s,l,u,c,d=t.aoColumns,h=t.aoData,f=Ge.ext.type.detect;for(e=0,n=d.length;n>e;e++)if(l=d[e],c=[],!l.sType&&l._sManualType)l.sType=l._sManualType;else if(!l.sType){for(i=0,o=f.length;o>i;i++){for(r=0,s=h.length;s>r&&(c[r]===a&&(c[r]=T(t,r,e,"type")),u=f[i](c[r],t),u&&"html"!==u);r++);if(u){l.sType=u;break}}l.sType||(l.sType="string")}}function S(t,e,i,o){var r,s,l,u,c,h,f,p=t.aoColumns;if(e)for(r=e.length-1;r>=0;r--){f=e[r];var g=f.targets!==a?f.targets:f.aTargets;for(n.isArray(g)||(g=[g]),l=0,u=g.length;u>l;l++)if("number"==typeof g[l]&&g[l]>=0){for(;p.length<=g[l];)d(t);o(g[l],f)}else if("number"==typeof g[l]&&g[l]<0)o(p.length+g[l],f);else if("string"==typeof g[l])for(c=0,h=p.length;h>c;c++)("_all"==g[l]||n(p[c].nTh).hasClass(g[l]))&&o(c,f)}if(i)for(r=0,s=i.length;s>r;r++)o(r,i[r])}function y(t,e,a,i){var o=t.aoData.length,r=n.extend(!0,{},Ge.models.oRow,{src:a?"dom":"data"});r._aData=e,t.aoData.push(r);for(var s=t.aoColumns,l=0,u=s.length;u>l;l++)a&&w(t,o,l,T(t,o,l)),s[l].sType=null;return t.aiDisplayMaster.push(o),(a||!t.oFeatures.bDeferRender)&&N(t,o,a,i),o}function _(t,e){var a;return e instanceof n||(e=n(e)),e.map(function(e,n){return a=P(t,n),y(t,a.data,n,a.cells)})}function C(t,e){return e._DT_RowIndex!==a?e._DT_RowIndex:null}function D(t,e,a){return n.inArray(a,t.aoData[e].anCells)}function T(t,e,n,i){var o=t.iDraw,r=t.aoColumns[n],s=t.aoData[e]._aData,l=r.sDefaultContent,u=r.fnGetData(s,i,{settings:t,row:e,col:n});if(u===a)return t.iDrawError!=o&&null===l&&(He(t,0,"Requested unknown parameter "+("function"==typeof r.mData?"{function}":"'"+r.mData+"'")+" for row "+e,4),t.iDrawError=o),l;if(u!==s&&null!==u||null===l){if("function"==typeof u)return u.call(s)}else u=l;return null===u&&"display"==i?"":u}function w(t,e,a,n){var i=t.aoColumns[a],o=t.aoData[e]._aData;i.fnSetData(o,n,{settings:t,row:e,col:a})}function x(t){return n.map(t.match(/(\\.|[^\.])+/g),function(t){return t.replace(/\\./g,".")})}function R(t){if(n.isPlainObject(t)){var e={};return n.each(t,function(t,a){a&&(e[t]=R(a))}),function(t,n,i,o){var r=e[n]||e._;return r!==a?r(t,n,i,o):t}}if(null===t)return function(t){return t};if("function"==typeof t)return function(e,a,n,i){return t(e,a,n,i)};if("string"!=typeof t||-1===t.indexOf(".")&&-1===t.indexOf("[")&&-1===t.indexOf("("))return function(e){return e[t]};var i=function(t,e,n){var o,r,s,l;if(""!==n)for(var u=x(n),c=0,d=u.length;d>c;c++){if(o=u[c].match(va),r=u[c].match(Sa),o){u[c]=u[c].replace(va,""),""!==u[c]&&(t=t[u[c]]),s=[],u.splice(0,c+1),l=u.join(".");for(var h=0,f=t.length;f>h;h++)s.push(i(t[h],e,l));var p=o[0].substring(1,o[0].length-1);t=""===p?s:s.join(p);break}if(r)u[c]=u[c].replace(Sa,""),t=t[u[c]]();else{if(null===t||t[u[c]]===a)return a;t=t[u[c]]}}return t};return function(e,a){return i(e,a,t)}}function I(t){if(n.isPlainObject(t))return I(t._);if(null===t)return function(){};if("function"==typeof t)return function(e,a,n){t(e,"set",a,n)};if("string"!=typeof t||-1===t.indexOf(".")&&-1===t.indexOf("[")&&-1===t.indexOf("("))return function(e,a){e[t]=a};var e=function(t,n,i){for(var o,r,s,l,u,c=x(i),d=c[c.length-1],h=0,f=c.length-1;f>h;h++){if(r=c[h].match(va),s=c[h].match(Sa),r){c[h]=c[h].replace(va,""),t[c[h]]=[],o=c.slice(),o.splice(0,h+1),u=o.join(".");for(var p=0,g=n.length;g>p;p++)l={},e(l,n[p],u),t[c[h]].push(l);return}s&&(c[h]=c[h].replace(Sa,""),t=t[c[h]](n)),(null===t[c[h]]||t[c[h]]===a)&&(t[c[h]]={}),t=t[c[h]]}d.match(Sa)?t=t[d.replace(Sa,"")](n):t[d.replace(va,"")]=n};return function(a,n){return e(a,n,t)}}function F(t){return ha(t.aoData,"_aData")}function L(t){t.aoData.length=0,t.aiDisplayMaster.length=0,t.aiDisplay.length=0}function A(t,e,n){for(var i=-1,o=0,r=t.length;r>o;o++)t[o]==e?i=o:t[o]>e&&t[o]--;-1!=i&&n===a&&t.splice(i,1)}function V(t,e,n,i){var o,r,s=t.aoData[e];if("dom"!==n&&(n&&"auto"!==n||"dom"!==s.src)){var l,u=s.anCells;if(u)for(o=0,r=u.length;r>o;o++){for(l=u[o];l.childNodes.length;)l.removeChild(l.firstChild);u[o].innerHTML=T(t,e,o,"display")}}else s._aData=P(t,s).data;s._aSortData=null,s._aFilterData=null;var c=t.aoColumns;if(i!==a)c[i].sType=null;else for(o=0,r=c.length;r>o;o++)c[o].sType=null;O(s)}function P(t,e){var a,i,o,r,s=[],l=[],u=e.firstChild,c=0,d=t.aoColumns,h=function(t,e,a){if("string"==typeof t){var n=t.indexOf("@");if(-1!==n){var i=t.substring(n+1);o["@"+i]=a.getAttribute(i)}}},f=function(t){i=d[c],r=n.trim(t.innerHTML),i&&i._bAttrSrc?(o={display:r},h(i.mData.sort,o,t),h(i.mData.type,o,t),h(i.mData.filter,o,t),s.push(o)):s.push(r),c++};if(u)for(;u;)a=u.nodeName.toUpperCase(),("TD"==a||"TH"==a)&&(f(u),l.push(u)),u=u.nextSibling;else{l=e.anCells;for(var p=0,g=l.length;g>p;p++)f(l[p])}return{data:s,cells:l}}function N(t,a,n,i){var o,r,s,l,u,c=t.aoData[a],d=c._aData,h=[];if(null===c.nTr){for(o=n||e.createElement("tr"),c.nTr=o,c.anCells=h,o._DT_RowIndex=a,O(c),l=0,u=t.aoColumns.length;u>l;l++)s=t.aoColumns[l],r=n?i[l]:e.createElement(s.sCellType),h.push(r),(!n||s.mRender||s.mData!==l)&&(r.innerHTML=T(t,a,l,"display")),s.sClass&&(r.className+=" "+s.sClass),s.bVisible&&!n?o.appendChild(r):!s.bVisible&&n&&r.parentNode.removeChild(r),s.fnCreatedCell&&s.fnCreatedCell.call(t.oInstance,r,T(t,a,l),d,a,l);Ee(t,"aoRowCreatedCallback",null,[o,d,a])}c.nTr.setAttribute("role","row")}function O(t){var e=t.nTr,a=t._aData;if(e){if(a.DT_RowId&&(e.id=a.DT_RowId),a.DT_RowClass){var i=a.DT_RowClass.split(" ");t.__rowc=t.__rowc?ma(t.__rowc.concat(i)):i,n(e).removeClass(t.__rowc.join(" ")).addClass(a.DT_RowClass)}a.DT_RowData&&n(e).data(a.DT_RowData)}}function H(t){var e,a,i,o,r,s=t.nTHead,l=t.nTFoot,u=0===n("th, td",s).length,c=t.oClasses,d=t.aoColumns;for(u&&(o=n("<tr/>").appendTo(s)),e=0,a=d.length;a>e;e++)r=d[e],i=n(r.nTh).addClass(r.sClass),u&&i.appendTo(o),t.oFeatures.bSort&&(i.addClass(r.sSortingClass),r.bSortable!==!1&&(i.attr("tabindex",t.iTabIndex).attr("aria-controls",t.sTableId),Le(t,r.nTh,e))),r.sTitle!=i.html()&&i.html(r.sTitle),We(t,"header")(t,i,r,c);if(u&&E(t.aoHeader,s),n(s).find(">tr").attr("role","row"),n(s).find(">tr>th, >tr>td").addClass(c.sHeaderTH),n(l).find(">tr>th, >tr>td").addClass(c.sFooterTH),null!==l){var h=t.aoFooter[0];for(e=0,a=h.length;a>e;e++)r=d[e],r.nTf=h[e].cell,r.sClass&&n(r.nTf).addClass(r.sClass)}}function $(t,e,i){var o,r,s,l,u,c,d,h,f,p=[],g=[],m=t.aoColumns.length;if(e){for(i===a&&(i=!1),o=0,r=e.length;r>o;o++){for(p[o]=e[o].slice(),p[o].nTr=e[o].nTr,s=m-1;s>=0;s--)t.aoColumns[s].bVisible||i||p[o].splice(s,1);g.push([])}for(o=0,r=p.length;r>o;o++){if(d=p[o].nTr)for(;c=d.firstChild;)d.removeChild(c);for(s=0,l=p[o].length;l>s;s++)if(h=1,f=1,g[o][s]===a){for(d.appendChild(p[o][s].cell),g[o][s]=1;p[o+h]!==a&&p[o][s].cell==p[o+h][s].cell;)g[o+h][s]=1,h++;for(;p[o][s+f]!==a&&p[o][s].cell==p[o][s+f].cell;){for(u=0;h>u;u++)g[o+u][s+f]=1;f++}n(p[o][s].cell).attr("rowspan",h).attr("colspan",f)}}}}function k(t){var e=Ee(t,"aoPreDrawCallback","preDraw",[t]);if(-1!==n.inArray(!1,e))return pe(t,!1),void 0;var i=[],o=0,r=t.asStripeClasses,s=r.length,l=(t.aoOpenRows.length,t.oLanguage),u=t.iInitDisplayStart,c="ssp"==Be(t),d=t.aiDisplay;t.bDrawing=!0,u!==a&&-1!==u&&(t._iDisplayStart=c?u:u>=t.fnRecordsDisplay()?0:u,t.iInitDisplayStart=-1);var h=t._iDisplayStart,f=t.fnDisplayEnd();if(t.bDeferLoading)t.bDeferLoading=!1,t.iDraw++,pe(t,!1);else if(c){if(!t.bDestroying&&!B(t))return}else t.iDraw++;if(0!==d.length)for(var p=c?0:h,g=c?t.aoData.length:f,b=p;g>b;b++){var v=d[b],S=t.aoData[v];null===S.nTr&&N(t,v);var y=S.nTr;if(0!==s){var _=r[o%s];S._sRowStripe!=_&&(n(y).removeClass(S._sRowStripe).addClass(_),S._sRowStripe=_)}Ee(t,"aoRowCallback",null,[y,S._aData,o,b]),i.push(y),o++}else{var C=l.sZeroRecords;1==t.iDraw&&"ajax"==Be(t)?C=l.sLoadingRecords:l.sEmptyTable&&0===t.fnRecordsTotal()&&(C=l.sEmptyTable),i[0]=n("<tr/>",{"class":s?r[0]:""}).append(n("<td />",{valign:"top",colSpan:m(t),"class":t.oClasses.sRowEmpty}).html(C))[0]}Ee(t,"aoHeaderCallback","header",[n(t.nTHead).children("tr")[0],F(t),h,f,d]),Ee(t,"aoFooterCallback","footer",[n(t.nTFoot).children("tr")[0],F(t),h,f,d]);var D=n(t.nTBody);D.children().detach(),D.append(n(i)),Ee(t,"aoDrawCallback","draw",[t]),t.bSorted=!1,t.bFiltered=!1,t.bDrawing=!1}function j(t,e){var a=t.oFeatures,n=a.bSort,i=a.bFilter;n&&Re(t),i?X(t,t.oPreviousSearch):t.aiDisplay=t.aiDisplayMaster.slice(),e!==!0&&(t._iDisplayStart=0),t._drawHold=e,k(t),t._drawHold=!1}function U(t){var e=t.oClasses,a=n(t.nTable),i=n("<div/>").insertBefore(a),o=t.oFeatures,r=n("<div/>",{id:t.sTableId+"_wrapper","class":e.sWrapper+(t.nTFoot?"":" "+e.sNoFooter)});t.nHolding=i[0],t.nTableWrapper=r[0],t.nTableReinsertBefore=t.nTable.nextSibling;for(var s,l,u,c,d,h,f=t.sDom.split(""),p=0;p<f.length;p++){if(s=null,l=f[p],"<"==l){if(u=n("<div/>")[0],c=f[p+1],"'"==c||'"'==c){for(d="",h=2;f[p+h]!=c;)d+=f[p+h],h++;if("H"==d?d=e.sJUIHeader:"F"==d&&(d=e.sJUIFooter),-1!=d.indexOf(".")){var g=d.split(".");u.id=g[0].substr(1,g[0].length-1),u.className=g[1]}else"#"==d.charAt(0)?u.id=d.substr(1,d.length-1):u.className=d;p+=h}r.append(u),r=n(u)}else if(">"==l)r=r.parent();else if("l"==l&&o.bPaginate&&o.bLengthChange)s=ce(t);else if("f"==l&&o.bFilter)s=G(t);else if("r"==l&&o.bProcessing)s=fe(t);else if("t"==l)s=ge(t);else if("i"==l&&o.bInfo)s=ie(t);else if("p"==l&&o.bPaginate)s=de(t);else if(0!==Ge.ext.feature.length)for(var m=Ge.ext.feature,b=0,v=m.length;v>b;b++)if(l==m[b].cFeature){s=m[b].fnInit(t);break}if(s){var S=t.aanFeatures;S[l]||(S[l]=[]),S[l].push(s),r.append(s)}}i.replaceWith(r)}function E(t,e){var a,i,o,r,s,l,u,c,d,h,f,p=n(e).children("tr"),g=function(t,e,a){for(var n=t[e];n[a];)a++;return a};for(t.splice(0,t.length),o=0,l=p.length;l>o;o++)t.push([]);for(o=0,l=p.length;l>o;o++)for(a=p[o],c=0,i=a.firstChild;i;){if("TD"==i.nodeName.toUpperCase()||"TH"==i.nodeName.toUpperCase())for(d=1*i.getAttribute("colspan"),h=1*i.getAttribute("rowspan"),d=d&&0!==d&&1!==d?d:1,h=h&&0!==h&&1!==h?h:1,u=g(t,o,c),f=1===d?!0:!1,s=0;d>s;s++)for(r=0;h>r;r++)t[o+r][u+s]={cell:i,unique:f},t[o+r].nTr=a;i=i.nextSibling}}function M(t,e,a){var n=[];a||(a=t.aoHeader,e&&(a=[],E(a,e)));for(var i=0,o=a.length;o>i;i++)for(var r=0,s=a[i].length;s>r;r++)!a[i][r].unique||n[r]&&t.bSortCellsTop||(n[r]=a[i][r].cell);return n}function W(t,e,a){if(Ee(t,"aoServerParams","serverParams",[e]),e&&n.isArray(e)){var i={},o=/(.*?)\[\]$/;n.each(e,function(t,e){var a=e.name.match(o);if(a){var n=a[0];i[n]||(i[n]=[]),i[n].push(e.value)}else i[e.name]=e.value}),e=i}var r,s=t.ajax,l=t.oInstance;if(n.isPlainObject(s)&&s.data){r=s.data;var u=n.isFunction(r)?r(e):r;e=n.isFunction(r)&&u?u:n.extend(!0,e,u),delete s.data}var c={data:e,success:function(e){var n=e.error||e.sError;n&&t.oApi._fnLog(t,0,n),t.json=e,Ee(t,null,"xhr",[t,e]),a(e)},dataType:"json",cache:!1,type:t.sServerMethod,error:function(e,a){var n=t.oApi._fnLog;"parsererror"==a?n(t,0,"Invalid JSON response",1):4===e.readyState&&n(t,0,"Ajax error",7),pe(t,!1)}};t.oAjaxData=e,Ee(t,null,"preXhr",[t,e]),t.fnServerData?t.fnServerData.call(l,t.sAjaxSource,n.map(e,function(t,e){return{name:e,value:t}}),a,t):t.sAjaxSource||"string"==typeof s?t.jqXHR=n.ajax(n.extend(c,{url:s||t.sAjaxSource})):n.isFunction(s)?t.jqXHR=s.call(l,e,a,t):(t.jqXHR=n.ajax(n.extend(c,s)),s.data=r)}function B(t){return t.bAjaxDataGet?(t.iDraw++,pe(t,!0),W(t,q(t),function(e){z(t,e)}),!1):!0}function q(t){var e,a,i,o,r=t.aoColumns,s=r.length,l=t.oFeatures,u=t.oPreviousSearch,c=t.aoPreSearchCols,d=[],h=xe(t),f=t._iDisplayStart,p=l.bPaginate!==!1?t._iDisplayLength:-1,g=function(t,e){d.push({name:t,value:e})};g("sEcho",t.iDraw),g("iColumns",s),g("sColumns",ha(r,"sName").join(",")),g("iDisplayStart",f),g("iDisplayLength",p);var m={draw:t.iDraw,columns:[],order:[],start:f,length:p,search:{value:u.sSearch,regex:u.bRegex}};for(e=0;s>e;e++)i=r[e],o=c[e],a="function"==typeof i.mData?"function":i.mData,m.columns.push({data:a,name:i.sName,searchable:i.bSearchable,orderable:i.bSortable,search:{value:o.sSearch,regex:o.bRegex}}),g("mDataProp_"+e,a),l.bFilter&&(g("sSearch_"+e,o.sSearch),g("bRegex_"+e,o.bRegex),g("bSearchable_"+e,i.bSearchable)),l.bSort&&g("bSortable_"+e,i.bSortable);l.bFilter&&(g("sSearch",u.sSearch),g("bRegex",u.bRegex)),l.bSort&&(n.each(h,function(t,e){m.order.push({column:e.col,dir:e.dir}),g("iSortCol_"+t,e.col),g("sSortDir_"+t,e.dir)}),g("iSortingCols",h.length));var b=Ge.ext.legacy.ajax;return null===b?t.sAjaxSource?d:m:b?d:m}function z(t,e){var n=function(t,n){return e[t]!==a?e[t]:e[n]},i=n("sEcho","draw"),o=n("iTotalRecords","recordsTotal"),r=n("iTotalDisplayRecords","recordsFiltered");if(i){if(1*i<t.iDraw)return;t.iDraw=1*i}L(t),t._iRecordsTotal=parseInt(o,10),t._iRecordsDisplay=parseInt(r,10);for(var s=J(t,e),l=0,u=s.length;u>l;l++)y(t,s[l]);t.aiDisplay=t.aiDisplayMaster.slice(),t.bAjaxDataGet=!1,k(t),t._bInitComplete||le(t,e),t.bAjaxDataGet=!0,pe(t,!1)}function J(t,e){var i=n.isPlainObject(t.ajax)&&t.ajax.dataSrc!==a?t.ajax.dataSrc:t.sAjaxDataProp;return"data"===i?e.aaData||e[i]:""!==i?R(i)(e):e}function G(t){var a=t.oClasses,i=t.sTableId,o=t.oLanguage,r=t.oPreviousSearch,s=t.aanFeatures,l='<input type="search" class="'+a.sFilterInput+'"/>',u=o.sSearch;u=u.match(/_INPUT_/)?u.replace("_INPUT_",l):u+l;var c=n("<div/>",{id:s.f?null:i+"_filter","class":a.sFilter}).append(n("<label/>").append(u)),d=function(){var e=(s.f,this.value?this.value:"");e!=r.sSearch&&(X(t,{sSearch:e,bRegex:r.bRegex,bSmart:r.bSmart,bCaseInsensitive:r.bCaseInsensitive}),t._iDisplayStart=0,k(t))},h=n("input",c).val(r.sSearch).attr("placeholder",o.sSearchPlaceholder).bind("keyup.DT search.DT input.DT paste.DT cut.DT","ssp"===Be(t)?Se(d,400):d).bind("keypress.DT",function(t){return 13==t.keyCode?!1:void 0}).attr("aria-controls",i);return n(t.nTable).on("search.dt.DT",function(a,n){if(t===n)try{h[0]!==e.activeElement&&h.val(r.sSearch)}catch(i){}}),c[0]}function X(t,e,n){var i=t.oPreviousSearch,o=t.aoPreSearchCols,r=function(t){i.sSearch=t.sSearch,i.bRegex=t.bRegex,i.bSmart=t.bSmart,i.bCaseInsensitive=t.bCaseInsensitive
},s=function(t){return t.bEscapeRegex!==a?!t.bEscapeRegex:t.bRegex};if(v(t),"ssp"!=Be(t)){Z(t,e.sSearch,n,s(e),e.bSmart,e.bCaseInsensitive),r(e);for(var l=0;l<o.length;l++)Q(t,o[l].sSearch,l,s(o[l]),o[l].bSmart,o[l].bCaseInsensitive);Y(t)}else r(e);t.bFiltered=!0,Ee(t,null,"search",[t])}function Y(t){for(var e,a,n=Ge.ext.search,i=t.aiDisplay,o=0,r=n.length;r>o;o++){for(var s=[],l=0,u=i.length;u>l;l++)a=i[l],e=t.aoData[a],n[o](t,e._aFilterData,a,e._aData,l)&&s.push(a);i.length=0,i.push.apply(i,s)}}function Q(t,e,a,n,i,o){if(""!==e)for(var r,s=t.aiDisplay,l=K(e,n,i,o),u=s.length-1;u>=0;u--)r=t.aoData[s[u]]._aFilterData[a],l.test(r)||s.splice(u,1)}function Z(t,e,a,n,i,o){var r,s,l,u=K(e,n,i,o),c=t.oPreviousSearch.sSearch,d=t.aiDisplayMaster;if(0!==Ge.ext.search.length&&(a=!0),s=ee(t),e.length<=0)t.aiDisplay=d.slice();else for((s||a||c.length>e.length||0!==e.indexOf(c)||t.bSorted)&&(t.aiDisplay=d.slice()),r=t.aiDisplay,l=r.length-1;l>=0;l--)u.test(t.aoData[r[l]]._sFilterRow)||r.splice(l,1)}function K(t,e,a,i){if(t=e?t:te(t),a){var o=n.map(t.match(/"[^"]+"|[^ ]+/g)||"",function(t){return'"'===t.charAt(0)?t.match(/^"(.*)"$/)[1]:t});t="^(?=.*?"+o.join(")(?=.*?")+").*$"}return new RegExp(t,i?"i":"")}function te(t){return t.replace(ia,"\\$1")}function ee(t){var e,a,n,i,o,r,s,l,u=t.aoColumns,c=Ge.ext.type.search,d=!1;for(a=0,i=t.aoData.length;i>a;a++)if(l=t.aoData[a],!l._aFilterData){for(r=[],n=0,o=u.length;o>n;n++)e=u[n],e.bSearchable?(s=T(t,a,n,"filter"),c[e.sType]&&(s=c[e.sType](s)),null===s&&(s=""),"string"!=typeof s&&s.toString&&(s=s.toString())):s="",s.indexOf&&-1!==s.indexOf("&")&&(ya.innerHTML=s,s=_a?ya.textContent:ya.innerText),s.replace&&(s=s.replace(/[\r\n]/g,"")),r.push(s);l._aFilterData=r,l._sFilterRow=r.join("  "),d=!0}return d}function ae(t){return{search:t.sSearch,smart:t.bSmart,regex:t.bRegex,caseInsensitive:t.bCaseInsensitive}}function ne(t){return{sSearch:t.search,bSmart:t.smart,bRegex:t.regex,bCaseInsensitive:t.caseInsensitive}}function ie(t){var e=t.sTableId,a=t.aanFeatures.i,i=n("<div/>",{"class":t.oClasses.sInfo,id:a?null:e+"_info"});return a||(t.aoDrawCallback.push({fn:oe,sName:"information"}),i.attr("role","status").attr("aria-live","polite"),n(t.nTable).attr("aria-describedby",e+"_info")),i[0]}function oe(t){var e=t.aanFeatures.i;if(0!==e.length){var a=t.oLanguage,i=t._iDisplayStart+1,o=t.fnDisplayEnd(),r=t.fnRecordsTotal(),s=t.fnRecordsDisplay(),l=s?a.sInfo:a.sInfoEmpty;s!==r&&(l+=" "+a.sInfoFiltered),l+=a.sInfoPostFix,l=re(t,l);var u=a.fnInfoCallback;null!==u&&(l=u.call(t.oInstance,t,i,o,r,s,l)),n(e).html(l)}}function re(t,e){var a=t.fnFormatNumber,n=t._iDisplayStart+1,i=t._iDisplayLength,o=t.fnRecordsDisplay(),r=-1===i;return e.replace(/_START_/g,a.call(t,n)).replace(/_END_/g,a.call(t,t.fnDisplayEnd())).replace(/_MAX_/g,a.call(t,t.fnRecordsTotal())).replace(/_TOTAL_/g,a.call(t,o)).replace(/_PAGE_/g,a.call(t,r?1:Math.ceil(n/i))).replace(/_PAGES_/g,a.call(t,r?1:Math.ceil(o/i)))}function se(t){var e,a,n,i=t.iInitDisplayStart,o=t.aoColumns,r=t.oFeatures;if(!t.bInitialised)return setTimeout(function(){se(t)},200),void 0;for(U(t),H(t),$(t,t.aoHeader),$(t,t.aoFooter),pe(t,!0),r.bAutoWidth&&ve(t),e=0,a=o.length;a>e;e++)n=o[e],n.sWidth&&(n.nTh.style.width=Te(n.sWidth));j(t);var s=Be(t);"ssp"!=s&&("ajax"==s?W(t,[],function(a){var n=J(t,a);for(e=0;e<n.length;e++)y(t,n[e]);t.iInitDisplayStart=i,j(t),pe(t,!1),le(t,a)},t):(pe(t,!1),le(t)))}function le(t,e){t._bInitComplete=!0,e&&f(t),Ee(t,"aoInitComplete","init",[t,e])}function ue(t,e){var a=parseInt(e,10);t._iDisplayLength=a,Me(t),Ee(t,null,"length",[t,a])}function ce(t){for(var e=t.oClasses,a=t.sTableId,i=t.aLengthMenu,o=n.isArray(i[0]),r=o?i[0]:i,s=o?i[1]:i,l=n("<select/>",{name:a+"_length","aria-controls":a,"class":e.sLengthSelect}),u=0,c=r.length;c>u;u++)l[0][u]=new Option(s[u],r[u]);var d=n("<div><label/></div>").addClass(e.sLength);return t.aanFeatures.l||(d[0].id=a+"_length"),d.children().append(t.oLanguage.sLengthMenu.replace("_MENU_",l[0].outerHTML)),n("select",d).val(t._iDisplayLength).bind("change.DT",function(){ue(t,n(this).val()),k(t)}),n(t.nTable).bind("length.dt.DT",function(e,a,i){t===a&&n("select",d).val(i)}),d[0]}function de(t){var e=t.sPaginationType,a=Ge.ext.pager[e],i="function"==typeof a,o=function(t){k(t)},r=n("<div/>").addClass(t.oClasses.sPaging+e)[0],s=t.aanFeatures;return i||a.fnInit(t,r,o),s.p||(r.id=t.sTableId+"_paginate",t.aoDrawCallback.push({fn:function(t){if(i){var e,n,r=t._iDisplayStart,l=t._iDisplayLength,u=t.fnRecordsDisplay(),c=-1===l,d=c?0:Math.ceil(r/l),h=c?1:Math.ceil(u/l),f=a(d,h);for(e=0,n=s.p.length;n>e;e++)We(t,"pageButton")(t,s.p[e],e,f,d,h)}else a.fnUpdate(t,o)},sName:"pagination"})),r}function he(t,e,a){var n=t._iDisplayStart,i=t._iDisplayLength,o=t.fnRecordsDisplay();0===o||-1===i?n=0:"number"==typeof e?(n=e*i,n>o&&(n=0)):"first"==e?n=0:"previous"==e?(n=i>=0?n-i:0,0>n&&(n=0)):"next"==e?o>n+i&&(n+=i):"last"==e?n=Math.floor((o-1)/i)*i:He(t,0,"Unknown paging action: "+e,5);var r=t._iDisplayStart!==n;return t._iDisplayStart=n,r&&(Ee(t,null,"page",[t]),a&&k(t)),r}function fe(t){return n("<div/>",{id:t.aanFeatures.r?null:t.sTableId+"_processing","class":t.oClasses.sProcessing}).html(t.oLanguage.sProcessing).insertBefore(t.nTable)[0]}function pe(t,e){t.oFeatures.bProcessing&&n(t.aanFeatures.r).css("display",e?"block":"none"),Ee(t,null,"processing",[t,e])}function ge(t){var e=n(t.nTable);e.attr("role","grid");var a=t.oScroll;if(""===a.sX&&""===a.sY)return t.nTable;var i=a.sX,o=a.sY,r=t.oClasses,s=e.children("caption"),l=s.length?s[0]._captionSide:null,u=n(e[0].cloneNode(!1)),c=n(e[0].cloneNode(!1)),d=e.children("tfoot"),h="<div/>",f=function(t){return t?Te(t):null};a.sX&&"100%"===e.attr("width")&&e.removeAttr("width"),d.length||(d=null);var p=n(h,{"class":r.sScrollWrapper}).append(n(h,{"class":r.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:i?f(i):"100%"}).append(n(h,{"class":r.sScrollHeadInner}).css({"box-sizing":"content-box",width:a.sXInner||"100%"}).append(u.removeAttr("id").css("margin-left",0).append(e.children("thead")))).append("top"===l?s:null)).append(n(h,{"class":r.sScrollBody}).css({overflow:"auto",height:f(o),width:f(i)}).append(e));d&&p.append(n(h,{"class":r.sScrollFoot}).css({overflow:"hidden",border:0,width:i?f(i):"100%"}).append(n(h,{"class":r.sScrollFootInner}).append(c.removeAttr("id").css("margin-left",0).append(e.children("tfoot")))).append("bottom"===l?s:null));var g=p.children(),m=g[0],b=g[1],v=d?g[2]:null;return i&&n(b).scroll(function(){var t=this.scrollLeft;m.scrollLeft=t,d&&(v.scrollLeft=t)}),t.nScrollHead=m,t.nScrollBody=b,t.nScrollFoot=v,t.aoDrawCallback.push({fn:me,sName:"scrolling"}),p[0]}function me(t){var e,a,i,o,r,s,l,u,c,d=t.oScroll,h=d.sX,f=d.sXInner,g=d.sY,m=d.iBarWidth,b=n(t.nScrollHead),v=b[0].style,S=b.children("div"),y=S[0].style,_=S.children("table"),C=t.nScrollBody,D=n(C),T=C.style,w=n(t.nScrollFoot),x=w.children("div"),R=x.children("table"),I=n(t.nTHead),F=n(t.nTable),L=F[0],A=L.style,V=t.nTFoot?n(t.nTFoot):null,P=t.oBrowser,N=P.bScrollOversize,O=[],H=[],$=[],k=function(t){var e=t.style;e.paddingTop="0",e.paddingBottom="0",e.borderTopWidth="0",e.borderBottomWidth="0",e.height=0};if(F.children("thead, tfoot").remove(),r=I.clone().prependTo(F),e=I.find("tr"),i=r.find("tr"),r.find("th, td").removeAttr("tabindex"),V&&(s=V.clone().prependTo(F),a=V.find("tr"),o=s.find("tr")),h||(T.width="100%",b[0].style.width="100%"),n.each(M(t,r),function(e,a){l=p(t,e),a.style.width=t.aoColumns[l].sWidth}),V&&be(function(t){t.style.width=""},o),d.bCollapse&&""!==g&&(T.height=D[0].offsetHeight+I[0].offsetHeight+"px"),c=F.outerWidth(),""===h?(A.width="100%",N&&(F.find("tbody").height()>C.offsetHeight||"scroll"==D.css("overflow-y"))&&(A.width=Te(F.outerWidth()-m))):""!==f?A.width=Te(f):c==D.width()&&D.height()<F.height()?(A.width=Te(c-m),F.outerWidth()>c-m&&(A.width=Te(c))):A.width=Te(c),c=F.outerWidth(),be(k,i),be(function(t){$.push(t.innerHTML),O.push(Te(n(t).css("width")))},i),be(function(t,e){t.style.width=O[e]},e),n(i).height(0),V&&(be(k,o),be(function(t){H.push(Te(n(t).css("width")))},o),be(function(t,e){t.style.width=H[e]},a),n(o).height(0)),be(function(t,e){t.innerHTML='<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+$[e]+"</div>",t.style.width=O[e]},i),V&&be(function(t,e){t.innerHTML="",t.style.width=H[e]},o),F.outerWidth()<c?(u=C.scrollHeight>C.offsetHeight||"scroll"==D.css("overflow-y")?c+m:c,N&&(C.scrollHeight>C.offsetHeight||"scroll"==D.css("overflow-y"))&&(A.width=Te(u-m)),(""===h||""!==f)&&He(t,1,"Possible column misalignment",6)):u="100%",T.width=Te(u),v.width=Te(u),V&&(t.nScrollFoot.style.width=Te(u)),g||N&&(T.height=Te(L.offsetHeight+m)),g&&d.bCollapse){T.height=Te(g);var j=h&&L.offsetWidth>C.offsetWidth?m:0;L.offsetHeight<C.offsetHeight&&(T.height=Te(L.offsetHeight+j))}var U=F.outerWidth();_[0].style.width=Te(U),y.width=Te(U);var E=F.height()>C.clientHeight||"scroll"==D.css("overflow-y"),W="padding"+(P.bScrollbarLeft?"Left":"Right");y[W]=E?m+"px":"0px",V&&(R[0].style.width=Te(U),x[0].style.width=Te(U),x[0].style[W]=E?m+"px":"0px"),D.scroll(),!t.bSorted&&!t.bFiltered||t._drawHold||(C.scrollTop=0)}function be(t,e,a){for(var n,i,o=0,r=0,s=e.length;s>r;){for(n=e[r].firstChild,i=a?a[r].firstChild:null;n;)1===n.nodeType&&(a?t(n,i,o):t(n,o),o++),n=n.nextSibling,i=a?i.nextSibling:null;r++}}function ve(e){var a,i,o,r,s,l=e.nTable,u=e.aoColumns,c=e.oScroll,d=c.sY,h=c.sX,p=c.sXInner,g=u.length,v=b(e,"bVisible"),S=n("th",e.nTHead),y=l.getAttribute("width"),_=l.parentNode,C=!1;for(a=0;a<v.length;a++)i=u[v[a]],null!==i.sWidth&&(i.sWidth=ye(i.sWidthOrig,_),C=!0);if(C||h||d||g!=m(e)||g!=S.length){var D=n(l).clone().empty().css("visibility","hidden").removeAttr("id").append(n(e.nTHead).clone(!1)).append(n(e.nTFoot).clone(!1)).append(n("<tbody><tr/></tbody>"));D.find("tfoot th, tfoot td").css("width","");var T=D.find("tbody tr");for(S=M(e,D.find("thead")[0]),a=0;a<v.length;a++)i=u[v[a]],S[a].style.width=null!==i.sWidthOrig&&""!==i.sWidthOrig?Te(i.sWidthOrig):"";if(e.aoData.length)for(a=0;a<v.length;a++)o=v[a],i=u[o],n(Ce(e,o)).clone(!1).append(i.sContentPadding).appendTo(T);if(D.appendTo(_),h&&p?D.width(p):h?(D.css("width","auto"),D.width()<_.offsetWidth&&D.width(_.offsetWidth)):d?D.width(_.offsetWidth):y&&D.width(y),_e(e,D[0]),h){var w=0;for(a=0;a<v.length;a++)i=u[v[a]],s=n(S[a]).outerWidth(),w+=null===i.sWidthOrig?s:parseInt(i.sWidth,10)+s-n(S[a]).width();D.width(Te(w)),l.style.width=Te(w)}for(a=0;a<v.length;a++)i=u[v[a]],r=n(S[a]).width(),r&&(i.sWidth=Te(r));l.style.width=Te(D.css("width")),D.remove()}else for(a=0;g>a;a++)u[a].sWidth=Te(S.eq(a).width());y&&(l.style.width=Te(y)),!y&&!h||e._reszEvt||(n(t).bind("resize.DT-"+e.sInstance,Se(function(){f(e)})),e._reszEvt=!0)}function Se(t,e){var n,i,o=e||200;return function(){var e=this,r=+new Date,s=arguments;n&&n+o>r?(clearTimeout(i),i=setTimeout(function(){n=a,t.apply(e,s)},o)):n?(n=r,t.apply(e,s)):n=r}}function ye(t,a){if(!t)return 0;var i=n("<div/>").css("width",Te(t)).appendTo(a||e.body),o=i[0].offsetWidth;return i.remove(),o}function _e(t,e){var a=t.oScroll;if(a.sX||a.sY){var i=a.sX?0:a.iBarWidth;e.style.width=Te(n(e).outerWidth()-i)}}function Ce(t,e){var a=De(t,e);if(0>a)return null;var i=t.aoData[a];return i.nTr?i.anCells[e]:n("<td/>").html(T(t,a,e,"display"))[0]}function De(t,e){for(var a,n=-1,i=-1,o=0,r=t.aoData.length;r>o;o++)a=T(t,o,e,"display")+"",a=a.replace(Ca,""),a.length>n&&(n=a.length,i=o);return i}function Te(t){return null===t?"0px":"number"==typeof t?0>t?"0px":t+"px":t.match(/\d$/)?t+"px":t}function we(){if(!Ge.__scrollbarWidth){var t=n("<p/>").css({width:"100%",height:200,padding:0})[0],e=n("<div/>").css({position:"absolute",top:0,left:0,width:200,height:150,padding:0,overflow:"hidden",visibility:"hidden"}).append(t).appendTo("body"),a=t.offsetWidth;e.css("overflow","scroll");var i=t.offsetWidth;a===i&&(i=e[0].clientWidth),e.remove(),Ge.__scrollbarWidth=a-i}return Ge.__scrollbarWidth}function xe(t){var e,a,i,o,r,s,l,u=[],c=t.aoColumns,d=t.aaSortingFixed,h=n.isPlainObject(d),f=[],p=function(t){t.length&&!n.isArray(t[0])?f.push(t):f.push.apply(f,t)};for(n.isArray(d)&&p(d),h&&d.pre&&p(d.pre),p(t.aaSorting),h&&d.post&&p(d.post),e=0;e<f.length;e++)for(l=f[e][0],o=c[l].aDataSort,a=0,i=o.length;i>a;a++)r=o[a],s=c[r].sType||"string",u.push({src:l,col:r,dir:f[e][1],index:f[e][2],type:s,formatter:Ge.ext.type.order[s+"-pre"]});return u}function Re(t){var e,a,n,i,o,r=[],s=Ge.ext.type.order,l=t.aoData,u=(t.aoColumns,0),c=t.aiDisplayMaster;for(v(t),o=xe(t),e=0,a=o.length;a>e;e++)i=o[e],i.formatter&&u++,Ve(t,i.col);if("ssp"!=Be(t)&&0!==o.length){for(e=0,n=c.length;n>e;e++)r[c[e]]=e;u===o.length?c.sort(function(t,e){var a,n,i,s,u,c=o.length,d=l[t]._aSortData,h=l[e]._aSortData;for(i=0;c>i;i++)if(u=o[i],a=d[u.col],n=h[u.col],s=n>a?-1:a>n?1:0,0!==s)return"asc"===u.dir?s:-s;return a=r[t],n=r[e],n>a?-1:a>n?1:0}):c.sort(function(t,e){var a,n,i,u,c,d,h=o.length,f=l[t]._aSortData,p=l[e]._aSortData;for(i=0;h>i;i++)if(c=o[i],a=f[c.col],n=p[c.col],d=s[c.type+"-"+c.dir]||s["string-"+c.dir],u=d(a,n),0!==u)return u;return a=r[t],n=r[e],n>a?-1:a>n?1:0})}t.bSorted=!0}function Ie(t){for(var e,a,n=t.aoColumns,i=xe(t),o=t.oLanguage.oAria,r=0,s=n.length;s>r;r++){var l=n[r],u=l.asSorting,c=l.sTitle.replace(/<.*?>/g,""),d=l.nTh;d.removeAttribute("aria-sort"),l.bSortable?(i.length>0&&i[0].col==r?(d.setAttribute("aria-sort","asc"==i[0].dir?"ascending":"descending"),a=u[i[0].index+1]||u[0]):a=u[0],e=c+("asc"===a?o.sSortAscending:o.sSortDescending)):e=c,d.setAttribute("aria-label",e)}}function Fe(t,e,i,o){var r,s=t.aoColumns[e],l=t.aaSorting,u=s.asSorting,c=function(t){var e=t._idx;return e===a&&(e=n.inArray(t[1],u)),e+1>=u.length?0:e+1};if("number"==typeof l[0]&&(l=t.aaSorting=[l]),i&&t.oFeatures.bSortMulti){var d=n.inArray(e,ha(l,"0"));-1!==d?(r=c(l[d]),l[d][1]=u[r],l[d]._idx=r):(l.push([e,u[0],0]),l[l.length-1]._idx=0)}else l.length&&l[0][0]==e?(r=c(l[0]),l.length=1,l[0][1]=u[r],l[0]._idx=r):(l.length=0,l.push([e,u[0]]),l[0]._idx=0);j(t),"function"==typeof o&&o(t)}function Le(t,e,a,n){var i=t.aoColumns[a];je(e,{},function(e){i.bSortable!==!1&&(t.oFeatures.bProcessing?(pe(t,!0),setTimeout(function(){Fe(t,a,e.shiftKey,n),"ssp"!==Be(t)&&pe(t,!1)},0)):Fe(t,a,e.shiftKey,n))})}function Ae(t){var e,a,i,o=t.aLastSort,r=t.oClasses.sSortColumn,s=xe(t),l=t.oFeatures;if(l.bSort&&l.bSortClasses){for(e=0,a=o.length;a>e;e++)i=o[e].src,n(ha(t.aoData,"anCells",i)).removeClass(r+(2>e?e+1:3));for(e=0,a=s.length;a>e;e++)i=s[e].src,n(ha(t.aoData,"anCells",i)).addClass(r+(2>e?e+1:3))}t.aLastSort=s}function Ve(t,e){var a,n=t.aoColumns[e],i=Ge.ext.order[n.sSortDataType];i&&(a=i.call(t.oInstance,t,e,g(t,e)));for(var o,r,s=Ge.ext.type.order[n.sType+"-pre"],l=0,u=t.aoData.length;u>l;l++)o=t.aoData[l],o._aSortData||(o._aSortData=[]),(!o._aSortData[e]||i)&&(r=i?a[l]:T(t,l,e,"sort"),o._aSortData[e]=s?s(r):r)}function Pe(t){if(t.oFeatures.bStateSave&&!t.bDestroying){var e={time:+new Date,start:t._iDisplayStart,length:t._iDisplayLength,order:n.extend(!0,[],t.aaSorting),search:ae(t.oPreviousSearch),columns:n.map(t.aoColumns,function(e,a){return{visible:e.bVisible,search:ae(t.aoPreSearchCols[a])}})};Ee(t,"aoStateSaveParams","stateSaveParams",[t,e]),t.oSavedState=e,t.fnStateSaveCallback.call(t.oInstance,t,e)}}function Ne(t){var e,a,i=t.aoColumns;if(t.oFeatures.bStateSave){var o=t.fnStateLoadCallback.call(t.oInstance,t);if(o&&o.time){var r=Ee(t,"aoStateLoadParams","stateLoadParams",[t,o]);if(-1===n.inArray(!1,r)){var s=t.iStateDuration;if(!(s>0&&o.time<+new Date-1e3*s)&&i.length===o.columns.length){for(t.oLoadedState=n.extend(!0,{},o),t._iDisplayStart=o.start,t.iInitDisplayStart=o.start,t._iDisplayLength=o.length,t.aaSorting=[],n.each(o.order,function(e,a){t.aaSorting.push(a[0]>=i.length?[0,a[1]]:a)}),n.extend(t.oPreviousSearch,ne(o.search)),e=0,a=o.columns.length;a>e;e++){var l=o.columns[e];i[e].bVisible=l.visible,n.extend(t.aoPreSearchCols[e],ne(l.search))}Ee(t,"aoStateLoaded","stateLoaded",[t,o])}}}}}function Oe(t){var e=Ge.settings,a=n.inArray(t,ha(e,"nTable"));return-1!==a?e[a]:null}function He(e,a,n,i){if(n="DataTables warning: "+(null!==e?"table id="+e.sTableId+" - ":"")+n,i&&(n+=". For more information about this error, please see http://datatables.net/tn/"+i),a)t.console&&console.log&&console.log(n);else{var o=Ge.ext,r=o.sErrMode||o.errMode;if("alert"!=r)throw new Error(n);alert(n)}}function $e(t,e,i,o){return n.isArray(i)?(n.each(i,function(a,i){n.isArray(i)?$e(t,e,i[0],i[1]):$e(t,e,i)}),void 0):(o===a&&(o=i),e[i]!==a&&(t[o]=e[i]),void 0)}function ke(t,e,a){var i;for(var o in e)e.hasOwnProperty(o)&&(i=e[o],n.isPlainObject(i)?(n.isPlainObject(t[o])||(t[o]={}),n.extend(!0,t[o],i)):t[o]=a&&"data"!==o&&"aaData"!==o&&n.isArray(i)?i.slice():i);return t}function je(t,e,a){n(t).bind("click.DT",e,function(e){t.blur(),a(e)}).bind("keypress.DT",e,function(t){13===t.which&&(t.preventDefault(),a(t))}).bind("selectstart.DT",function(){return!1})}function Ue(t,e,a,n){a&&t[e].push({fn:a,sName:n})}function Ee(t,e,a,i){var o=[];return e&&(o=n.map(t[e].slice().reverse(),function(e){return e.fn.apply(t.oInstance,i)})),null!==a&&n(t.nTable).trigger(a+".dt",i),o}function Me(t){var e=t._iDisplayStart,a=t.fnDisplayEnd(),n=t._iDisplayLength;a===t.fnRecordsDisplay()&&(e=a-n),(-1===n||0>e)&&(e=0),t._iDisplayStart=e}function We(t,e){var a=t.renderer,i=Ge.ext.renderer[e];return n.isPlainObject(a)&&a[e]?i[a[e]]||i._:"string"==typeof a?i[a]||i._:i._}function Be(t){return t.oFeatures.bServerSide?"ssp":t.ajax||t.sAjaxSource?"ajax":"dom"}function qe(t,e){var a=[],n=Ba.numbers_length,i=Math.floor(n/2);return n>=e?a=pa(0,e):i>=t?(a=pa(0,n-2),a.push("ellipsis"),a.push(e-1)):t>=e-1-i?(a=pa(e-(n-2),e),a.splice(0,0,"ellipsis"),a.splice(0,0,0)):(a=pa(t-1,t+2),a.push("ellipsis"),a.push(e-1),a.splice(0,0,"ellipsis"),a.splice(0,0,0)),a.DT_el="span",a}function ze(t){n.each({num:function(e){return qa(e,t)},"num-fmt":function(e){return qa(e,t,oa)},"html-num":function(e){return qa(e,t,ea)},"html-num-fmt":function(e){return qa(e,t,ea,oa)}},function(e,a){Xe.type.order[e+t+"-pre"]=a})}function Je(t){return function(){var e=[Oe(this[Ge.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return Ge.ext.internal[t].apply(this,e)}}var Ge,Xe,Ye,Qe,Ze,Ke={},ta=/[\r\n]/g,ea=/<.*?>/g,aa=/^[\w\+\-]/,na=/[\w\+\-]$/,ia=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),oa=/[',$£€¥%\u2009\u202F]/g,ra=function(t){return t&&t!==!0&&"-"!==t?!1:!0},sa=function(t){var e=parseInt(t,10);return!isNaN(e)&&isFinite(t)?e:null},la=function(t,e){return Ke[e]||(Ke[e]=new RegExp(te(e),"g")),"string"==typeof t?t.replace(/\./g,"").replace(Ke[e],"."):t},ua=function(t,e,a){var n="string"==typeof t;return e&&n&&(t=la(t,e)),a&&n&&(t=t.replace(oa,"")),ra(t)||!isNaN(parseFloat(t))&&isFinite(t)},ca=function(t){return ra(t)||"string"==typeof t},da=function(t,e,a){if(ra(t))return!0;var n=ca(t);return n?ua(ga(t),e,a)?!0:null:null},ha=function(t,e,n){var i=[],o=0,r=t.length;if(n!==a)for(;r>o;o++)t[o]&&t[o][e]&&i.push(t[o][e][n]);else for(;r>o;o++)t[o]&&i.push(t[o][e]);return i},fa=function(t,e,n,i){var o=[],r=0,s=e.length;if(i!==a)for(;s>r;r++)o.push(t[e[r]][n][i]);else for(;s>r;r++)o.push(t[e[r]][n]);return o},pa=function(t,e){var n,i=[];e===a?(e=0,n=t):(n=e,e=t);for(var o=e;n>o;o++)i.push(o);return i},ga=function(t){return t.replace(ea,"")},ma=function(t){var e,a,n,i=[],o=t.length,r=0;t:for(a=0;o>a;a++){for(e=t[a],n=0;r>n;n++)if(i[n]===e)continue t;i.push(e),r++}return i},ba=function(t,e,n){t[e]!==a&&(t[n]=t[e])},va=/\[.*?\]$/,Sa=/\(\)$/,ya=n("<div>")[0],_a=ya.textContent!==a,Ca=/<.*?>/g;Ge=function(t){this.$=function(t,e){return this.api(!0).$(t,e)},this._=function(t,e){return this.api(!0).rows(t,e).data()},this.api=function(t){return t?new Ye(Oe(this[Xe.iApiIndex])):new Ye(this)},this.fnAddData=function(t,e){var i=this.api(!0),o=n.isArray(t)&&(n.isArray(t[0])||n.isPlainObject(t[0]))?i.rows.add(t):i.row.add(t);return(e===a||e)&&i.draw(),o.flatten().toArray()},this.fnAdjustColumnSizing=function(t){var e=this.api(!0).columns.adjust(),n=e.settings()[0],i=n.oScroll;t===a||t?e.draw(!1):(""!==i.sX||""!==i.sY)&&me(n)},this.fnClearTable=function(t){var e=this.api(!0).clear();(t===a||t)&&e.draw()},this.fnClose=function(t){this.api(!0).row(t).child.hide()},this.fnDeleteRow=function(t,e,n){var i=this.api(!0),o=i.rows(t),r=o.settings()[0],s=r.aoData[o[0][0]];return o.remove(),e&&e.call(this,r,s),(n===a||n)&&i.draw(),s},this.fnDestroy=function(t){this.api(!0).destroy(t)},this.fnDraw=function(t){this.api(!0).draw(!t)},this.fnFilter=function(t,e,n,i,o,r){var s=this.api(!0);null===e||e===a?s.search(t,n,i,r):s.column(e).search(t,n,i,r),s.draw()},this.fnGetData=function(t,e){var n=this.api(!0);if(t!==a){var i=t.nodeName?t.nodeName.toLowerCase():"";return e!==a||"td"==i||"th"==i?n.cell(t,e).data():n.row(t).data()||null}return n.data().toArray()},this.fnGetNodes=function(t){var e=this.api(!0);return t!==a?e.row(t).node():e.rows().nodes().flatten().toArray()},this.fnGetPosition=function(t){var e=this.api(!0),a=t.nodeName.toUpperCase();if("TR"==a)return e.row(t).index();if("TD"==a||"TH"==a){var n=e.cell(t).index();return[n.row,n.columnVisible,n.column]}return null},this.fnIsOpen=function(t){return this.api(!0).row(t).child.isShown()},this.fnOpen=function(t,e,a){return this.api(!0).row(t).child(e,a).show().child()[0]},this.fnPageChange=function(t,e){var n=this.api(!0).page(t);(e===a||e)&&n.draw(!1)},this.fnSetColumnVis=function(t,e,n){var i=this.api(!0).column(t).visible(e);(n===a||n)&&i.columns.adjust().draw()},this.fnSettings=function(){return Oe(this[Xe.iApiIndex])},this.fnSort=function(t){this.api(!0).order(t).draw()},this.fnSortListener=function(t,e,a){this.api(!0).order.listener(t,e,a)},this.fnUpdate=function(t,e,n,i,o){var r=this.api(!0);return n===a||null===n?r.row(e).data(t):r.cell(e,n).data(t),(o===a||o)&&r.columns.adjust(),(i===a||i)&&r.draw(),0},this.fnVersionCheck=Xe.fnVersionCheck;var e=this,i=t===a,c=this.length;i&&(t={}),this.oApi=this.internal=Xe.internal;for(var f in Ge.ext.internal)f&&(this[f]=Je(f));return this.each(function(){var f,p={},g=c>1?ke(p,t,!0):t,m=0,b=this.getAttribute("id"),v=!1,C=Ge.defaults;if("table"!=this.nodeName.toLowerCase())return He(null,0,"Non-table node initialisation ("+this.nodeName+")",2),void 0;s(C),l(C.column),o(C,C,!0),o(C.column,C.column,!0),o(C,g);var D=Ge.settings;for(m=0,f=D.length;f>m;m++){if(D[m].nTable==this){var T=g.bRetrieve!==a?g.bRetrieve:C.bRetrieve,w=g.bDestroy!==a?g.bDestroy:C.bDestroy;if(i||T)return D[m].oInstance;if(w){D[m].oInstance.fnDestroy();break}return He(D[m],0,"Cannot reinitialise DataTable",3),void 0}if(D[m].sTableId==this.id){D.splice(m,1);break}}(null===b||""===b)&&(b="DataTables_Table_"+Ge.ext._unique++,this.id=b);var x=n.extend(!0,{},Ge.models.oSettings,{nTable:this,oApi:e.internal,oInit:g,sDestroyWidth:n(this)[0].style.width,sInstance:b,sTableId:b});D.push(x),x.oInstance=1===e.length?e:n(this).dataTable(),s(g),g.oLanguage&&r(g.oLanguage),g.aLengthMenu&&!g.iDisplayLength&&(g.iDisplayLength=n.isArray(g.aLengthMenu[0])?g.aLengthMenu[0][0]:g.aLengthMenu[0]),g=ke(n.extend(!0,{},C),g),$e(x.oFeatures,g,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),$e(x,g,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"],["bJQueryUI","bJUI"]]),$e(x.oScroll,g,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),$e(x.oLanguage,g,"fnInfoCallback"),Ue(x,"aoDrawCallback",g.fnDrawCallback,"user"),Ue(x,"aoServerParams",g.fnServerParams,"user"),Ue(x,"aoStateSaveParams",g.fnStateSaveParams,"user"),Ue(x,"aoStateLoadParams",g.fnStateLoadParams,"user"),Ue(x,"aoStateLoaded",g.fnStateLoaded,"user"),Ue(x,"aoRowCallback",g.fnRowCallback,"user"),Ue(x,"aoRowCreatedCallback",g.fnCreatedRow,"user"),Ue(x,"aoHeaderCallback",g.fnHeaderCallback,"user"),Ue(x,"aoFooterCallback",g.fnFooterCallback,"user"),Ue(x,"aoInitComplete",g.fnInitComplete,"user"),Ue(x,"aoPreDrawCallback",g.fnPreDrawCallback,"user");var R=x.oClasses;if(g.bJQueryUI?(n.extend(R,Ge.ext.oJUIClasses,g.oClasses),g.sDom===C.sDom&&"lfrtip"===C.sDom&&(x.sDom='<"H"lfr>t<"F"ip>'),x.renderer?n.isPlainObject(x.renderer)&&!x.renderer.header&&(x.renderer.header="jqueryui"):x.renderer="jqueryui"):n.extend(R,Ge.ext.classes,g.oClasses),n(this).addClass(R.sTable),(""!==x.oScroll.sX||""!==x.oScroll.sY)&&(x.oScroll.iBarWidth=we()),x.oScroll.sX===!0&&(x.oScroll.sX="100%"),x.iInitDisplayStart===a&&(x.iInitDisplayStart=g.iDisplayStart,x._iDisplayStart=g.iDisplayStart),null!==g.iDeferLoading){x.bDeferLoading=!0;var I=n.isArray(g.iDeferLoading);x._iRecordsDisplay=I?g.iDeferLoading[0]:g.iDeferLoading,x._iRecordsTotal=I?g.iDeferLoading[1]:g.iDeferLoading}""!==g.oLanguage.sUrl?(x.oLanguage.sUrl=g.oLanguage.sUrl,n.getJSON(x.oLanguage.sUrl,null,function(t){r(t),o(C.oLanguage,t),n.extend(!0,x.oLanguage,g.oLanguage,t),se(x)}),v=!0):n.extend(!0,x.oLanguage,g.oLanguage),null===g.asStripeClasses&&(x.asStripeClasses=[R.sStripeOdd,R.sStripeEven]);var F=x.asStripeClasses,L=n("tbody tr:eq(0)",this);-1!==n.inArray(!0,n.map(F,function(t){return L.hasClass(t)}))&&(n("tbody tr",this).removeClass(F.join(" ")),x.asDestroyStripes=F.slice());var A,V=[],N=this.getElementsByTagName("thead");if(0!==N.length&&(E(x.aoHeader,N[0]),V=M(x)),null===g.aoColumns)for(A=[],m=0,f=V.length;f>m;m++)A.push(null);else A=g.aoColumns;for(m=0,f=A.length;f>m;m++)d(x,V?V[m]:null);if(S(x,g.aoColumnDefs,A,function(t,e){h(x,t,e)}),L.length){var O=function(t,e){return t.getAttribute("data-"+e)?e:null};n.each(P(x,L[0]).cells,function(t,e){var n=x.aoColumns[t];if(n.mData===t){var i=O(e,"sort")||O(e,"order"),o=O(e,"filter")||O(e,"search");(null!==i||null!==o)&&(n.mData={_:t+".display",sort:null!==i?t+".@data-"+i:a,type:null!==i?t+".@data-"+i:a,filter:null!==o?t+".@data-"+o:a},h(x,t))}})}var H=x.oFeatures;if(g.bStateSave&&(H.bStateSave=!0,Ne(x,g),Ue(x,"aoDrawCallback",Pe,"state_save")),g.aaSorting===a){var $=x.aaSorting;for(m=0,f=$.length;f>m;m++)$[m][1]=x.aoColumns[m].asSorting[0]}Ae(x),H.bSort&&Ue(x,"aoDrawCallback",function(){if(x.bSorted){var t=xe(x),e={};n.each(t,function(t,a){e[a.src]=a.dir}),Ee(x,null,"order",[x,t,e]),Ie(x)}}),Ue(x,"aoDrawCallback",function(){(x.bSorted||"ssp"===Be(x)||H.bDeferRender)&&Ae(x)},"sc"),u(x);var k=n(this).children("caption").each(function(){this._captionSide=n(this).css("caption-side")}),j=n(this).children("thead");0===j.length&&(j=n("<thead/>").appendTo(this)),x.nTHead=j[0];var U=n(this).children("tbody");0===U.length&&(U=n("<tbody/>").appendTo(this)),x.nTBody=U[0];var W=n(this).children("tfoot");if(0===W.length&&k.length>0&&(""!==x.oScroll.sX||""!==x.oScroll.sY)&&(W=n("<tfoot/>").appendTo(this)),0===W.length||0===W.children().length?n(this).addClass(R.sNoFooter):W.length>0&&(x.nTFoot=W[0],E(x.aoFooter,x.nTFoot)),g.aaData)for(m=0;m<g.aaData.length;m++)y(x,g.aaData[m]);else(x.bDeferLoading||"dom"==Be(x))&&_(x,n(x.nTBody).children("tr"));x.aiDisplay=x.aiDisplayMaster.slice(),x.bInitialised=!0,v===!1&&se(x)}),e=null,this};var Da=[],Ta=Array.prototype,wa=function(t){var e,a,i=Ge.settings,o=n.map(i,function(t){return t.nTable});return t?t.nTable&&t.oApi?[t]:t.nodeName&&"table"===t.nodeName.toLowerCase()?(e=n.inArray(t,o),-1!==e?[i[e]]:null):t&&"function"==typeof t.settings?t.settings().toArray():("string"==typeof t?a=n(t):t instanceof n&&(a=t),a?a.map(function(){return e=n.inArray(this,o),-1!==e?i[e]:null}).toArray():void 0):[]};Ye=function(t,e){if(!this instanceof Ye)throw"DT API must be constructed as a new object";var a=[],i=function(t){var e=wa(t);e&&a.push.apply(a,e)};if(n.isArray(t))for(var o=0,r=t.length;r>o;o++)i(t[o]);else i(t);this.context=ma(a),e&&this.push.apply(this,e.toArray?e.toArray():e),this.selector={rows:null,cols:null,opts:null},Ye.extend(this,this,Da)},Ge.Api=Ye,Ye.prototype={concat:Ta.concat,context:[],each:function(t){for(var e=0,a=this.length;a>e;e++)t.call(this,this[e],e,this);return this},eq:function(t){var e=this.context;return e.length>t?new Ye(e[t],this[t]):null},filter:function(t){var e=[];if(Ta.filter)e=Ta.filter.call(this,t,this);else for(var a=0,n=this.length;n>a;a++)t.call(this,this[a],a,this)&&e.push(this[a]);return new Ye(this.context,e)},flatten:function(){var t=[];return new Ye(this.context,t.concat.apply(t,this.toArray()))},join:Ta.join,indexOf:Ta.indexOf||function(t,e){for(var a=e||0,n=this.length;n>a;a++)if(this[a]===t)return a;return-1},iterator:function(t,e,n){var i,o,r,s,l,u,c,d,h=[],f=this.context,p=this.selector;for("string"==typeof t&&(n=e,e=t,t=!1),o=0,r=f.length;r>o;o++)if("table"===e)i=n(f[o],o),i!==a&&h.push(i);else if("columns"===e||"rows"===e)i=n(f[o],this[o],o),i!==a&&h.push(i);else if("column"===e||"column-rows"===e||"row"===e||"cell"===e)for(c=this[o],"column-rows"===e&&(u=Aa(f[o],p.opts)),s=0,l=c.length;l>s;s++)d=c[s],i="cell"===e?n(f[o],d.row,d.column,o,s):n(f[o],d,o,s,u),i!==a&&h.push(i);if(h.length){var g=new Ye(f,t?h.concat.apply([],h):h),m=g.selector;return m.rows=p.rows,m.cols=p.cols,m.opts=p.opts,g}return this},lastIndexOf:Ta.lastIndexOf||function(){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(t){var e=[];if(Ta.map)e=Ta.map.call(this,t,this);else for(var a=0,n=this.length;n>a;a++)e.push(t.call(this,this[a],a));return new Ye(this.context,e)},pluck:function(t){return this.map(function(e){return e[t]})},pop:Ta.pop,push:Ta.push,reduce:Ta.reduce||function(t,e){return c(this,t,e,0,this.length,1)},reduceRight:Ta.reduceRight||function(t,e){return c(this,t,e,this.length-1,-1,-1)},reverse:Ta.reverse,selector:null,shift:Ta.shift,sort:Ta.sort,splice:Ta.splice,toArray:function(){return Ta.slice.call(this)},to$:function(){return n(this)},toJQuery:function(){return n(this)},unique:function(){return new Ye(this.context,ma(this))},unshift:Ta.unshift},Ye.extend=function(t,e,a){if(e&&(e instanceof Ye||e.__dt_wrapper)){var i,o,r,s=function(t,e,a){return function(){var n=e.apply(t,arguments);return Ye.extend(n,n,a.methodExt),n}};for(i=0,o=a.length;o>i;i++)r=a[i],e[r.name]="function"==typeof r.val?s(t,r.val,r):n.isPlainObject(r.val)?{}:r.val,e[r.name].__dt_wrapper=!0,Ye.extend(t,e[r.name],r.propExt)}},Ye.register=Qe=function(t,e){if(n.isArray(t))for(var a=0,i=t.length;i>a;a++)Ye.register(t[a],e);else{var o,r,s,l,u=t.split("."),c=Da,d=function(t,e){for(var a=0,n=t.length;n>a;a++)if(t[a].name===e)return t[a];return null};for(o=0,r=u.length;r>o;o++){l=-1!==u[o].indexOf("()"),s=l?u[o].replace("()",""):u[o];var h=d(c,s);h||(h={name:s,val:{},methodExt:[],propExt:[]},c.push(h)),o===r-1?h.val=e:c=l?h.methodExt:h.propExt}}},Ye.registerPlural=Ze=function(t,e,i){Ye.register(t,i),Ye.register(e,function(){var t=i.apply(this,arguments);return t===this?this:t instanceof Ye?t.length?n.isArray(t[0])?new Ye(t.context,t[0]):t[0]:a:t})};var xa=function(t,e){if("number"==typeof t)return[e[t]];var a=n.map(e,function(t){return t.nTable});return n(a).filter(t).map(function(){var t=n.inArray(this,a);return e[t]}).toArray()};Qe("tables()",function(t){return t?new Ye(xa(t,this.context)):this}),Qe("table()",function(t){var e=this.tables(t),a=e.context;return a.length?new Ye(a[0]):e}),Ze("tables().nodes()","table().node()",function(){return this.iterator("table",function(t){return t.nTable})}),Ze("tables().body()","table().body()",function(){return this.iterator("table",function(t){return t.nTBody})}),Ze("tables().header()","table().header()",function(){return this.iterator("table",function(t){return t.nTHead})}),Ze("tables().footer()","table().footer()",function(){return this.iterator("table",function(t){return t.nTFoot})}),Ze("tables().containers()","table().container()",function(){return this.iterator("table",function(t){return t.nTableWrapper
})}),Qe("draw()",function(t){return this.iterator("table",function(e){j(e,t===!1)})}),Qe("page()",function(t){return t===a?this.page.info().page:this.iterator("table",function(e){he(e,t)})}),Qe("page.info()",function(){if(0===this.context.length)return a;var t=this.context[0],e=t._iDisplayStart,n=t._iDisplayLength,i=t.fnRecordsDisplay(),o=-1===n;return{page:o?0:Math.floor(e/n),pages:o?1:Math.ceil(i/n),start:e,end:t.fnDisplayEnd(),length:n,recordsTotal:t.fnRecordsTotal(),recordsDisplay:i}}),Qe("page.len()",function(t){return t===a?0!==this.context.length?this.context[0]._iDisplayLength:a:this.iterator("table",function(e){ue(e,t)})});var Ra=function(t,e,a){if("ssp"==Be(t)?j(t,e):(pe(t,!0),W(t,[],function(a){L(t);for(var n=J(t,a),i=0,o=n.length;o>i;i++)y(t,n[i]);j(t,e),pe(t,!1)})),a){var n=new Ye(t);n.one("draw",function(){a(n.ajax.json())})}};Qe("ajax.json()",function(){var t=this.context;return t.length>0?t[0].json:void 0}),Qe("ajax.params()",function(){var t=this.context;return t.length>0?t[0].oAjaxData:void 0}),Qe("ajax.reload()",function(t,e){return this.iterator("table",function(a){Ra(a,e===!1,t)})}),Qe("ajax.url()",function(t){var e=this.context;return t===a?0===e.length?a:(e=e[0],e.ajax?n.isPlainObject(e.ajax)?e.ajax.url:e.ajax:e.sAjaxSource):this.iterator("table",function(e){n.isPlainObject(e.ajax)?e.ajax.url=t:e.ajax=t})}),Qe("ajax.url().load()",function(t,e){return this.iterator("table",function(a){Ra(a,e===!1,t)})});var Ia=function(t,e){var i,o,r,s,l,u,c=[];for(t&&"string"!=typeof t&&t.length!==a||(t=[t]),r=0,s=t.length;s>r;r++)for(o=t[r]&&t[r].split?t[r].split(","):[t[r]],l=0,u=o.length;u>l;l++)i=e("string"==typeof o[l]?n.trim(o[l]):o[l]),i&&i.length&&c.push.apply(c,i);return c},Fa=function(t){return t||(t={}),t.filter&&!t.search&&(t.search=t.filter),{search:t.search||"none",order:t.order||"current",page:t.page||"all"}},La=function(t){for(var e=0,a=t.length;a>e;e++)if(t[e].length>0)return t[0]=t[e],t.length=1,t.context=[t.context[e]],t;return t.length=0,t},Aa=function(t,e){var a,i,o,r=[],s=t.aiDisplay,l=t.aiDisplayMaster,u=e.search,c=e.order,d=e.page;if("ssp"==Be(t))return"removed"===u?[]:pa(0,l.length);if("current"==d)for(a=t._iDisplayStart,i=t.fnDisplayEnd();i>a;a++)r.push(s[a]);else if("current"==c||"applied"==c)r="none"==u?l.slice():"applied"==u?s.slice():n.map(l,function(t){return-1===n.inArray(t,s)?t:null});else if("index"==c||"original"==c)for(a=0,i=t.aoData.length;i>a;a++)"none"==u?r.push(a):(o=n.inArray(a,s),(-1===o&&"removed"==u||o>=0&&"applied"==u)&&r.push(a));return r},Va=function(t,e,a){return Ia(e,function(e){var i=sa(e);if(null!==i&&!a)return[i];var o=Aa(t,a);if(null!==i&&-1!==n.inArray(i,o))return[i];if(!e)return o;for(var r=[],s=0,l=o.length;l>s;s++)r.push(t.aoData[o[s]].nTr);return e.nodeName&&-1!==n.inArray(e,r)?[e._DT_RowIndex]:n(r).filter(e).map(function(){return this._DT_RowIndex}).toArray()})};Qe("rows()",function(t,e){t===a?t="":n.isPlainObject(t)&&(e=t,t=""),e=Fa(e);var i=this.iterator("table",function(a){return Va(a,t,e)});return i.selector.rows=t,i.selector.opts=e,i}),Qe("rows().nodes()",function(){return this.iterator("row",function(t,e){return t.aoData[e].nTr||a})}),Qe("rows().data()",function(){return this.iterator(!0,"rows",function(t,e){return fa(t.aoData,e,"_aData")})}),Ze("rows().cache()","row().cache()",function(t){return this.iterator("row",function(e,a){var n=e.aoData[a];return"search"===t?n._aFilterData:n._aSortData})}),Ze("rows().invalidate()","row().invalidate()",function(t){return this.iterator("row",function(e,a){V(e,a,t)})}),Ze("rows().indexes()","row().index()",function(){return this.iterator("row",function(t,e){return e})}),Ze("rows().remove()","row().remove()",function(){var t=this;return this.iterator("row",function(e,a,i){var o=e.aoData;o.splice(a,1);for(var r=0,s=o.length;s>r;r++)null!==o[r].nTr&&(o[r].nTr._DT_RowIndex=r);n.inArray(a,e.aiDisplay);A(e.aiDisplayMaster,a),A(e.aiDisplay,a),A(t[i],a,!1),Me(e)})}),Qe("rows.add()",function(t){var e=this.iterator("table",function(e){var a,n,i,o=[];for(n=0,i=t.length;i>n;n++)a=t[n],a.nodeName&&"TR"===a.nodeName.toUpperCase()?o.push(_(e,a)[0]):o.push(y(e,a));return o}),a=this.rows(-1);return a.pop(),a.push.apply(a,e.toArray()),a}),Qe("row()",function(t,e){return La(this.rows(t,e))}),Qe("row().data()",function(t){var e=this.context;return t===a?e.length&&this.length?e[0].aoData[this[0]]._aData:a:(e[0].aoData[this[0]]._aData=t,V(e[0],this[0],"data"),this)}),Qe("row().node()",function(){var t=this.context;return t.length&&this.length?t[0].aoData[this[0]].nTr||null:null}),Qe("row.add()",function(t){t instanceof n&&t.length&&(t=t[0]);var e=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?_(e,t)[0]:y(e,t)});return this.row(e[0])});var Pa=function(t,e,a,i){var o=[],r=function(e,a){if(e.nodeName&&"tr"===e.nodeName.toLowerCase())o.push(e);else{var i=n("<tr><td/></tr>").addClass(a);n("td",i).addClass(a).html(e)[0].colSpan=m(t),o.push(i[0])}};if(n.isArray(a)||a instanceof n)for(var s=0,l=a.length;l>s;s++)r(a[s],i);else r(a,i);e._details&&e._details.remove(),e._details=n(o),e._detailsShow&&e._details.insertAfter(e.nTr)},Na=function(t){var e=t.context;if(e.length&&t.length){var n=e[0].aoData[t[0]];n._details&&(n._details.remove(),n._detailsShow=a,n._details=a)}},Oa=function(t,e){var a=t.context;if(a.length&&t.length){var n=a[0].aoData[t[0]];n._details&&(n._detailsShow=e,e?n._details.insertAfter(n.nTr):n._details.detach(),Ha(a[0]))}},Ha=function(t){var e=new Ye(t),a=".dt.DT_details",n="draw"+a,i="column-visibility"+a,o="destroy"+a,r=t.aoData;e.off(n+" "+i+" "+o),ha(r,"_details").length>0&&(e.on(n,function(a,n){t===n&&e.rows({page:"current"}).eq(0).each(function(t){var e=r[t];e._detailsShow&&e._details.insertAfter(e.nTr)})}),e.on(i,function(e,a){if(t===a)for(var n,i=m(a),o=0,s=r.length;s>o;o++)n=r[o],n._details&&n._details.children("td[colspan]").attr("colspan",i)}),e.on(o,function(e,a){if(t===a)for(var n=0,i=r.length;i>n;n++)r[n]._details&&Na(r[n])}))},$a="",ka=$a+"row().child",ja=ka+"()";Qe(ja,function(t,e){var n=this.context;return t===a?n.length&&this.length?n[0].aoData[this[0]]._details:a:(t===!0?this.child.show():t===!1?Na(this):n.length&&this.length&&Pa(n[0],n[0].aoData[this[0]],t,e),this)}),Qe([ka+".show()",ja+".show()"],function(){return Oa(this,!0),this}),Qe([ka+".hide()",ja+".hide()"],function(){return Oa(this,!1),this}),Qe([ka+".remove()",ja+".remove()"],function(){return Na(this),this}),Qe(ka+".isShown()",function(){var t=this.context;return t.length&&this.length?t[0].aoData[this[0]]._detailsShow||!1:!1});var Ua=/^(.+):(name|visIdx|visible)$/,Ea=function(t,e){var a=t.aoColumns,i=ha(a,"sName"),o=ha(a,"nTh");return Ia(e,function(e){var r=sa(e);if(""===e)return pa(a.length);if(null!==r)return[r>=0?r:a.length+r];var s="string"==typeof e?e.match(Ua):"";if(!s)return n(o).filter(e).map(function(){return n.inArray(this,o)}).toArray();switch(s[2]){case"visIdx":case"visible":var l=parseInt(s[1],10);if(0>l){var u=n.map(a,function(t,e){return t.bVisible?e:null});return[u[u.length+l]]}return[p(t,l)];case"name":return n.map(i,function(t,e){return t===s[1]?e:null})}})},Ma=function(t,e,i,o){var r,s,l,u,c=t.aoColumns,d=c[e],h=t.aoData;if(i===a)return d.bVisible;if(d.bVisible!==i){if(i){var p=n.inArray(!0,ha(c,"bVisible"),e+1);for(s=0,l=h.length;l>s;s++)u=h[s].nTr,r=h[s].anCells,u&&u.insertBefore(r[e],r[p]||null)}else n(ha(t.aoData,"anCells",e)).detach();d.bVisible=i,$(t,t.aoHeader),$(t,t.aoFooter),(o===a||o)&&(f(t),(t.oScroll.sX||t.oScroll.sY)&&me(t)),Ee(t,null,"column-visibility",[t,e,i]),Pe(t)}};Qe("columns()",function(t,e){t===a?t="":n.isPlainObject(t)&&(e=t,t=""),e=Fa(e);var i=this.iterator("table",function(a){return Ea(a,t,e)});return i.selector.cols=t,i.selector.opts=e,i}),Ze("columns().header()","column().header()",function(){return this.iterator("column",function(t,e){return t.aoColumns[e].nTh})}),Ze("columns().footer()","column().footer()",function(){return this.iterator("column",function(t,e){return t.aoColumns[e].nTf})}),Ze("columns().data()","column().data()",function(){return this.iterator("column-rows",function(t,e,a,n,i){for(var o=[],r=0,s=i.length;s>r;r++)o.push(T(t,i[r],e,""));return o})}),Ze("columns().cache()","column().cache()",function(t){return this.iterator("column-rows",function(e,a,n,i,o){return fa(e.aoData,o,"search"===t?"_aFilterData":"_aSortData",a)})}),Ze("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(t,e,a,n,i){return fa(t.aoData,i,"anCells",e)})}),Ze("columns().visible()","column().visible()",function(t,e){return this.iterator("column",function(n,i){return t===a?n.aoColumns[i].bVisible:Ma(n,i,t,e)})}),Ze("columns().indexes()","column().index()",function(t){return this.iterator("column",function(e,a){return"visible"===t?g(e,a):a})}),Qe("columns.adjust()",function(){return this.iterator("table",function(t){f(t)})}),Qe("column.index()",function(t,e){if(0!==this.context.length){var a=this.context[0];if("fromVisible"===t||"toData"===t)return p(a,e);if("fromData"===t||"toVisible"===t)return g(a,e)}}),Qe("column()",function(t,e){return La(this.columns(t,e))});var Wa=function(t,e,i){var o,r,s,l,u,c=t.aoData,d=Aa(t,i),h=fa(c,d,"anCells"),f=n([].concat.apply([],h)),p=t.aoColumns.length;return Ia(e,function(t){if(null===t||t===a){for(r=[],s=0,l=d.length;l>s;s++)for(o=d[s],u=0;p>u;u++)r.push({row:o,column:u});return r}return n.isPlainObject(t)?[t]:f.filter(t).map(function(t,e){return o=e.parentNode._DT_RowIndex,{row:o,column:n.inArray(e,c[o].anCells)}}).toArray()})};Qe("cells()",function(t,e,i){if(n.isPlainObject(t)&&(typeof t.row!==a?(i=e,e=null):(i=t,t=null)),n.isPlainObject(e)&&(i=e,e=null),null===e||e===a)return this.iterator("table",function(e){return Wa(e,t,Fa(i))});var o,r,s,l,u,c=this.columns(e,i),d=this.rows(t,i),h=this.iterator("table",function(t,e){for(o=[],r=0,s=d[e].length;s>r;r++)for(l=0,u=c[e].length;u>l;l++)o.push({row:d[e][r],column:c[e][l]});return o});return n.extend(h.selector,{cols:e,rows:t,opts:i}),h}),Ze("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(t,e,a){return t.aoData[e].anCells[a]})}),Qe("cells().data()",function(){return this.iterator("cell",function(t,e,a){return T(t,e,a)})}),Ze("cells().cache()","cell().cache()",function(t){return t="search"===t?"_aFilterData":"_aSortData",this.iterator("cell",function(e,a,n){return e.aoData[a][t][n]})}),Ze("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(t,e,a){return{row:e,column:a,columnVisible:g(t,a)}})}),Qe(["cells().invalidate()","cell().invalidate()"],function(t){var e=this.selector;return this.rows(e.rows,e.opts).invalidate(t),this}),Qe("cell()",function(t,e,a){return La(this.cells(t,e,a))}),Qe("cell().data()",function(t){var e=this.context,n=this[0];return t===a?e.length&&n.length?T(e[0],n[0].row,n[0].column):a:(w(e[0],n[0].row,n[0].column,t),V(e[0],n[0].row,"data",n[0].column),this)}),Qe("order()",function(t,e){var i=this.context;return t===a?0!==i.length?i[0].aaSorting:a:("number"==typeof t?t=[[t,e]]:n.isArray(t[0])||(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),Qe("order.listener()",function(t,e,a){return this.iterator("table",function(n){Le(n,t,e,a)})}),Qe(["columns().order()","column().order()"],function(t){var e=this;return this.iterator("table",function(a,i){var o=[];n.each(e[i],function(e,a){o.push([a,t])}),a.aaSorting=o})}),Qe("search()",function(t,e,i,o){var r=this.context;return t===a?0!==r.length?r[0].oPreviousSearch.sSearch:a:this.iterator("table",function(a){a.oFeatures.bFilter&&X(a,n.extend({},a.oPreviousSearch,{sSearch:t+"",bRegex:null===e?!1:e,bSmart:null===i?!0:i,bCaseInsensitive:null===o?!0:o}),1)})}),Ze("columns().search()","column().search()",function(t,e,i,o){return this.iterator("column",function(r,s){var l=r.aoPreSearchCols;return t===a?l[s].sSearch:(r.oFeatures.bFilter&&(n.extend(l[s],{sSearch:t+"",bRegex:null===e?!1:e,bSmart:null===i?!0:i,bCaseInsensitive:null===o?!0:o}),X(r,r.oPreviousSearch,1)),void 0)})}),Qe("state()",function(){return this.context.length?this.context[0].oSavedState:null}),Qe("state.clear()",function(){return this.iterator("table",function(t){t.fnStateSaveCallback.call(t.oInstance,t,{})})}),Qe("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),Qe("state.save()",function(){return this.iterator("table",function(t){Pe(t)})}),Ge.versionCheck=Ge.fnVersionCheck=function(t){for(var e,a,n=Ge.version.split("."),i=t.split("."),o=0,r=i.length;r>o;o++)if(e=parseInt(n[o],10)||0,a=parseInt(i[o],10)||0,e!==a)return e>a;return!0},Ge.isDataTable=Ge.fnIsDataTable=function(t){var e=n(t).get(0),a=!1;return n.each(Ge.settings,function(t,n){(n.nTable===e||n.nScrollHead===e||n.nScrollFoot===e)&&(a=!0)}),a},Ge.tables=Ge.fnTables=function(t){return jQuery.map(Ge.settings,function(e){return!t||t&&n(e.nTable).is(":visible")?e.nTable:void 0})},Ge.camelToHungarian=o,Qe("$()",function(t,e){var a=this.rows(e).nodes(),i=n(a);return n([].concat(i.filter(t).toArray(),i.find(t).toArray()))}),n.each(["on","one","off"],function(t,e){Qe(e+"()",function(){var t=Array.prototype.slice.call(arguments);t[0].match(/\.dt\b/)||(t[0]+=".dt");var a=n(this.tables().nodes());return a[e].apply(a,t),this})}),Qe("clear()",function(){return this.iterator("table",function(t){L(t)})}),Qe("settings()",function(){return new Ye(this.context,this.context)}),Qe("data()",function(){return this.iterator("table",function(t){return ha(t.aoData,"_aData")}).flatten()}),Qe("destroy()",function(e){return e=e||!1,this.iterator("table",function(a){var i,o=a.nTableWrapper.parentNode,r=a.oClasses,s=a.nTable,l=a.nTBody,u=a.nTHead,c=a.nTFoot,d=n(s),h=n(l),f=n(a.nTableWrapper),p=n.map(a.aoData,function(t){return t.nTr});a.bDestroying=!0,Ee(a,"aoDestroyCallback","destroy",[a]),e||new Ye(a).columns().visible(!0),f.unbind(".DT").find(":not(tbody *)").unbind(".DT"),n(t).unbind(".DT-"+a.sInstance),s!=u.parentNode&&(d.children("thead").detach(),d.append(u)),c&&s!=c.parentNode&&(d.children("tfoot").detach(),d.append(c)),d.detach(),f.detach(),a.aaSorting=[],a.aaSortingFixed=[],Ae(a),n(p).removeClass(a.asStripeClasses.join(" ")),n("th, td",u).removeClass(r.sSortable+" "+r.sSortableAsc+" "+r.sSortableDesc+" "+r.sSortableNone),a.bJUI&&(n("th span."+r.sSortIcon+", td span."+r.sSortIcon,u).detach(),n("th, td",u).each(function(){var t=n("div."+r.sSortJUIWrapper,this);n(this).append(t.contents()),t.detach()})),!e&&o&&o.insertBefore(s,a.nTableReinsertBefore),h.children().detach(),h.append(p),d.css("width",a.sDestroyWidth).removeClass(r.sTable),i=a.asDestroyStripes.length,i&&h.children().each(function(t){n(this).addClass(a.asDestroyStripes[t%i])});var g=n.inArray(a,Ge.settings);-1!==g&&Ge.settings.splice(g,1)})}),Ge.version="1.10.2",Ge.settings=[],Ge.models={},Ge.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},Ge.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null},Ge.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},Ge.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bJQueryUI:!1,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(t){try{return JSON.parse((-1===t.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+t.sInstance+"_"+location.pathname))}catch(e){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(t,e){try{(-1===t.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+t.sInstance+"_"+location.pathname,JSON.stringify(e))}catch(a){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:n.extend({},Ge.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null},i(Ge.defaults),Ge.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},i(Ge.defaults.column),Ge.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:a,oAjaxData:a,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,bJUI:null,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==Be(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==Be(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var t=this._iDisplayLength,e=this._iDisplayStart,a=e+t,n=this.aiDisplay.length,i=this.oFeatures,o=i.bPaginate;return i.bServerSide?o===!1||-1===t?e+n:Math.min(e+t,this._iRecordsDisplay):!o||a>n||-1===t?n:a},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{}},Ge.ext=Xe={classes:{},errMode:"alert",feature:[],search:[],internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:Ge.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:Ge.version},n.extend(Xe,{afnFiltering:Xe.search,aTypes:Xe.type.detect,ofnSearch:Xe.type.search,oSort:Xe.type.order,afnSortData:Xe.order,aoFeatures:Xe.feature,oApi:Xe.internal,oStdClasses:Xe.classes,oPagination:Xe.pager}),n.extend(Ge.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""}),function(){var t="";t="";var e=t+"ui-state-default",a=t+"css_right ui-icon ui-icon-",i=t+"fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";n.extend(Ge.ext.oJUIClasses,Ge.ext.classes,{sPageButton:"fg-button ui-button "+e,sPageButtonActive:"ui-state-disabled",sPageButtonDisabled:"ui-state-disabled",sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",sSortAsc:e+" sorting_asc",sSortDesc:e+" sorting_desc",sSortable:e+" sorting",sSortableAsc:e+" sorting_asc_disabled",sSortableDesc:e+" sorting_desc_disabled",sSortableNone:e+" sorting_disabled",sSortJUIAsc:a+"triangle-1-n",sSortJUIDesc:a+"triangle-1-s",sSortJUI:a+"carat-2-n-s",sSortJUIAscAllowed:a+"carat-1-n",sSortJUIDescAllowed:a+"carat-1-s",sSortJUIWrapper:"DataTables_sort_wrapper",sSortIcon:"DataTables_sort_icon",sScrollHead:"dataTables_scrollHead "+e,sScrollFoot:"dataTables_scrollFoot "+e,sHeaderTH:e,sFooterTH:e,sJUIHeader:i+" ui-corner-tl ui-corner-tr",sJUIFooter:i+" ui-corner-bl ui-corner-br"})}();var Ba=Ge.ext.pager;n.extend(Ba,{simple:function(){return["previous","next"]},full:function(){return["first","previous","next","last"]},simple_numbers:function(t,e){return["previous",qe(t,e),"next"]},full_numbers:function(t,e){return["first","previous",qe(t,e),"next","last"]},_numbers:qe,numbers_length:7}),n.extend(!0,Ge.ext.renderer,{pageButton:{_:function(t,a,i,o,r,s){var l,u,c=t.oClasses,d=t.oLanguage.oPaginate,h=0,f=function(e,a){var o,p,g,m,b=function(e){he(t,e.data.action,!0)};for(o=0,p=a.length;p>o;o++)if(m=a[o],n.isArray(m)){var v=n("<"+(m.DT_el||"div")+"/>").appendTo(e);f(v,m)}else{switch(l="",u="",m){case"ellipsis":e.append("<span>&hellip;</span>");break;case"first":l=d.sFirst,u=m+(r>0?"":" "+c.sPageButtonDisabled);break;case"previous":l=d.sPrevious,u=m+(r>0?"":" "+c.sPageButtonDisabled);break;case"next":l=d.sNext,u=m+(s-1>r?"":" "+c.sPageButtonDisabled);break;case"last":l=d.sLast,u=m+(s-1>r?"":" "+c.sPageButtonDisabled);break;default:l=m+1,u=r===m?c.sPageButtonActive:""}l&&(g=n("<a>",{"class":c.sPageButton+" "+u,"aria-controls":t.sTableId,"data-dt-idx":h,tabindex:t.iTabIndex,id:0===i&&"string"==typeof m?t.sTableId+"_"+m:null}).html(l).appendTo(e),je(g,{action:m},b),h++)}};try{var p=n(e.activeElement).data("dt-idx");f(n(a).empty(),o),null!==p&&n(a).find("[data-dt-idx="+p+"]").focus()}catch(g){}}}});var qa=function(t,e,a,n){return t&&"-"!==t?(e&&(t=la(t,e)),t.replace&&(a&&(t=t.replace(a,"")),n&&(t=t.replace(n,""))),1*t):-1/0};return n.extend(Xe.type.order,{"date-pre":function(t){return Date.parse(t)||0},"html-pre":function(t){return ra(t)?"":t.replace?t.replace(/<.*?>/g,"").toLowerCase():t+""},"string-pre":function(t){return ra(t)?"":"string"==typeof t?t.toLowerCase():t.toString?t.toString():""},"string-asc":function(t,e){return e>t?-1:t>e?1:0},"string-desc":function(t,e){return e>t?1:t>e?-1:0}}),ze(""),n.extend(Ge.ext.type.detect,[function(t,e){var a=e.oLanguage.sDecimal;return ua(t,a)?"num"+a:null},function(t){if(t&&(!aa.test(t)||!na.test(t)))return null;var e=Date.parse(t);return null!==e&&!isNaN(e)||ra(t)?"date":null},function(t,e){var a=e.oLanguage.sDecimal;return ua(t,a,!0)?"num-fmt"+a:null},function(t,e){var a=e.oLanguage.sDecimal;return da(t,a)?"html-num"+a:null},function(t,e){var a=e.oLanguage.sDecimal;return da(t,a,!0)?"html-num-fmt"+a:null},function(t){return ra(t)||"string"==typeof t&&-1!==t.indexOf("<")?"html":null}]),n.extend(Ge.ext.type.search,{html:function(t){return ra(t)?t:"string"==typeof t?t.replace(ta," ").replace(ea,""):""},string:function(t){return ra(t)?t:"string"==typeof t?t.replace(ta," "):t}}),n.extend(!0,Ge.ext.renderer,{header:{_:function(t,e,a,i){n(t.nTable).on("order.dt.DT",function(n,o,r,s){if(t===o){var l=a.idx;e.removeClass(a.sSortingClass+" "+i.sSortAsc+" "+i.sSortDesc).addClass("asc"==s[l]?i.sSortAsc:"desc"==s[l]?i.sSortDesc:a.sSortingClass)}})},jqueryui:function(t,e,a,i){var o=a.idx;n("<div/>").addClass(i.sSortJUIWrapper).append(e.contents()).append(n("<span/>").addClass(i.sSortIcon+" "+a.sSortingClassJUI)).appendTo(e),n(t.nTable).on("order.dt.DT",function(n,r,s,l){t===r&&(e.removeClass(i.sSortAsc+" "+i.sSortDesc).addClass("asc"==l[o]?i.sSortAsc:"desc"==l[o]?i.sSortDesc:a.sSortingClass),e.find("span."+i.sSortIcon).removeClass(i.sSortJUIAsc+" "+i.sSortJUIDesc+" "+i.sSortJUI+" "+i.sSortJUIAscAllowed+" "+i.sSortJUIDescAllowed).addClass("asc"==l[o]?i.sSortJUIAsc:"desc"==l[o]?i.sSortJUIDesc:a.sSortingClassJUI))})}}}),Ge.render={number:function(t,e,a,n){return{display:function(i){var o=0>i?"-":"";i=Math.abs(parseFloat(i));var r=parseInt(i,10),s=a?e+(i-r).toFixed(a).substring(2):"";return o+(n||"")+r.toString().replace(/\B(?=(\d{3})+(?!\d))/g,t)+s}}}},n.extend(Ge.ext.internal,{_fnExternApiFunc:Je,_fnBuildAjax:W,_fnAjaxUpdate:B,_fnAjaxParameters:q,_fnAjaxUpdateDraw:z,_fnAjaxDataSrc:J,_fnAddColumn:d,_fnColumnOptions:h,_fnAdjustColumnSizing:f,_fnVisibleToColumnIndex:p,_fnColumnIndexToVisible:g,_fnVisbleColumns:m,_fnGetColumns:b,_fnColumnTypes:v,_fnApplyColumnDefs:S,_fnHungarianMap:i,_fnCamelToHungarian:o,_fnLanguageCompat:r,_fnBrowserDetect:u,_fnAddData:y,_fnAddTr:_,_fnNodeToDataIndex:C,_fnNodeToColumnIndex:D,_fnGetCellData:T,_fnSetCellData:w,_fnSplitObjNotation:x,_fnGetObjectDataFn:R,_fnSetObjectDataFn:I,_fnGetDataMaster:F,_fnClearTable:L,_fnDeleteIndex:A,_fnInvalidateRow:V,_fnGetRowElements:P,_fnCreateTr:N,_fnBuildHead:H,_fnDrawHead:$,_fnDraw:k,_fnReDraw:j,_fnAddOptionsHtml:U,_fnDetectHeader:E,_fnGetUniqueThs:M,_fnFeatureHtmlFilter:G,_fnFilterComplete:X,_fnFilterCustom:Y,_fnFilterColumn:Q,_fnFilter:Z,_fnFilterCreateSearch:K,_fnEscapeRegex:te,_fnFilterData:ee,_fnFeatureHtmlInfo:ie,_fnUpdateInfo:oe,_fnInfoMacros:re,_fnInitialise:se,_fnInitComplete:le,_fnLengthChange:ue,_fnFeatureHtmlLength:ce,_fnFeatureHtmlPaginate:de,_fnPageChange:he,_fnFeatureHtmlProcessing:fe,_fnProcessingDisplay:pe,_fnFeatureHtmlTable:ge,_fnScrollDraw:me,_fnApplyToChildren:be,_fnCalculateColumnWidths:ve,_fnThrottle:Se,_fnConvertToWidth:ye,_fnScrollingWidthAdjust:_e,_fnGetWidestNode:Ce,_fnGetMaxLenString:De,_fnStringToCss:Te,_fnScrollBarWidth:we,_fnSortFlatten:xe,_fnSort:Re,_fnSortAria:Ie,_fnSortListener:Fe,_fnSortAttachListener:Le,_fnSortingClasses:Ae,_fnSortData:Ve,_fnSaveState:Pe,_fnLoadState:Ne,_fnSettingsFromNode:Oe,_fnLog:He,_fnMap:$e,_fnBindAction:je,_fnCallbackReg:Ue,_fnCallbackFire:Ee,_fnLengthOverflow:Me,_fnRenderer:We,_fnDataSource:Be,_fnRowAttributes:O,_fnCalculateEnd:function(){}}),n.fn.dataTable=Ge,n.fn.dataTableSettings=Ge.settings,n.fn.dataTableExt=Ge.ext,n.fn.DataTable=function(t){return n(this).dataTable(t).api()},n.each(Ge,function(t,e){n.fn.DataTable[t]=e}),n.fn.dataTable})}(window,document),function(t,e,a,n){"use strict";function i(e,a){this.element=e,this.page=t(e).find(".page"),this.options=t.extend({},r,a),this._defaults=r,this._name=o,this.init()}var o="autoScroll",r={by:"continuous",speed:"medium",pause:5},s=!0,l=null,u=null,c=null;i.prototype={init:function(){var e,a,i=this,o=null,r=null,s=null,d=t(this.element).outerHeight(!0),h=d,f=this.element.scrollHeight-this.element.offsetHeight;this.canScroll()&&("page"===this.options.by?(e="fastest"===this.options.speed?.4:"fast"===this.options.speed?.8:"medium"===this.options.speed?1.2:"slow"===this.options.speed?1.6:2,a=this.page.outerHeight(!0)/t(this.element).outerHeight(!0)*e):(e="fastest"===this.options.speed?60:"fast"===this.options.speed?50:"medium"===this.options.speed?40:"slow"===this.options.speed?30:20,a=Math.abs((this.page.outerHeight(!0)-t(this.element).outerHeight(!0))/e)),Draggable.create(this.element,{type:"scrollTop",throwProps:!0,edgeResistance:.75,onPress:function(){u.pause(),TweenLite.killDelayedCallsTo(o),TweenLite.killDelayedCallsTo(r),TweenLite.killDelayedCallsTo(c),TweenLite.killDelayedCallsTo(s)},onRelease:function(){"none"!==i.options.by&&TweenLite.delayedCall(i.options.pause,o=function(){h=t(i.element).scrollTop()+d,u.progress(t(i.element).scrollTop()/f).play()})}}),l=Draggable.get(this.element),u=TweenLite.to(l.scrollProxy,a,{scrollTop:f,ease:Linear.easeNone,delay:this.options.pause,paused:!0,onUpdate:"page"===this.options.by?function(){Math.abs(l.scrollProxy.top())>=h&&(u.pause(),h+=d,TweenLite.delayedCall(i.options.pause,s=function(){u.resume()}))}:n,onComplete:function(){TweenLite.delayedCall(i.options.pause,r=function(){TweenLite.to(i.page,1,{autoAlpha:0,onComplete:function(){u.seek(0).pause(),"page"===i.options.by&&(h=d),t(i.element).trigger("done")}})})}}),TweenLite.set(this.element,{overflowY:"hidden"}))},canScroll:function(){return this.options&&this.page.height()>t(this.element).height()}},i.prototype.play=function(){this.canScroll()&&"none"!==this.options.by&&u&&(s?(u.play(),s=!1):(TweenLite.to(this.page,1,{autoAlpha:1}),TweenLite.delayedCall(this.options.pause,c=function(){u.play()})))},i.prototype.pause=function(){u&&u.pause()},i.prototype.stop=function(){u&&u.kill(),this.element=null,this.page=null},t.fn.autoScroll=function(e){return this.each(function(){t.data(this,"plugin_"+o)||t.data(this,"plugin_"+o,new i(this,e))})}}(jQuery,window,document);var FINANCIAL_TABLE_CONFIG={PRODUCT_CODE:"1c2acf0b1e789bf4f14506e3e27c8a32832b6d5a",LOGOS_URL:"https://s3.amazonaws.com/risecontentlogos/financial/"};"undefined"!=typeof angular&&(angular.module("risevision.widget.financialTable.config",[]).value("PRODUCT_CODE",FINANCIAL_TABLE_CONFIG.PRODUCT_CODE).value("PRODUCT_ID","13"),angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"));var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-9"]),_gaq.push(["_trackPageview"]),function(){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(t,e)}(),function(t,e,a){"use strict";function n(){RiseVision.Financial.Table.play()}function i(){RiseVision.Financial.Table.pause()}function o(){RiseVision.Financial.Table.pause()}var r=new a.Prefs;t.oncontextmenu=function(){return!1},$(e).ready(function(){var t=r.getString("id");a.rpc.register("rscmd_getInstrument",function(t){return RiseVision.Financial.Table.getInstrument.call(financial,t)}),t&&""!==t&&(a.rpc.register("rscmd_play_"+t,n),a.rpc.register("rscmd_pause_"+t,i),a.rpc.register("rscmd_stop_"+t,o),a.rpc.register("rsparam_set_"+t,RiseVision.Financial.Table.setParams),a.rpc.call("","rsparam_get",null,t,["additionalParams","displayId","companyId"]))}),e.body.style.background="transparent"}(window,document,gadgets);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.ArrowLoader={},RiseVision.Common.ArrowLoader=function(t){"use strict";function e(t){r?t&&t():(a(),t&&(s=t))
}function a(){o=0,n(t.LOGOS_URL+"animated-green-arrow.gif"),n(t.LOGOS_URL+"animated-red-arrow.gif")}function n(t){var e=new Image;e.onload=function(){i()},e.onerror=function(){i()},e.src=t}function i(){o++,2===o&&s&&s()}var o,r=!1,s=null;return{load:e}}(FINANCIAL_TABLE_CONFIG);var RiseVision=RiseVision||{};RiseVision.Financial=RiseVision.Financial||{},RiseVision.Financial.Layout={},RiseVision.Financial.Layout=function(t){"use strict";function e(e){o="layouts/table.xml",s?e():o&&$.ajax(o).done(function(a){if(a.getElementsByTagName("Style").length>0){var n=t.getElementsByTagName("head")[0],i=t.createElement("style");i.type="text/css",i.innerHTML=a.getElementsByTagName("Style")[0].childNodes[1].nodeValue,n.appendChild(i)}return 0===a.getElementsByTagName("Layout").length?(console.log("No Layout tag specified in custom layout file."),void 0):(r=a.getElementsByTagName("Layout")[0].childNodes[1].nodeValue,e(),void 0)})}function a(t){$("#container").empty(),o?i(t):n()}function n(){var e=null,a=null;e=t.createElement("div"),e.setAttribute("id","disclaimer"),e.setAttribute("class","default"),$("#container").append(e),a=t.createElement("table"),a.setAttribute("id","financial"),a.setAttribute("class","default page"),$("#container").append(a)}function i(t){$("#container").append(r);for(var e=0;t>e;e++){var a=$(".repeat:first").parent();e>0&&$(a).append($(".repeat:first").clone())}}var o,r,s=!1;return{load:e,loadLayout:a}}(document,gadgets);var RiseVision=RiseVision||{};RiseVision.Financial=RiseVision.Financial||{},RiseVision.Financial.Disclaimer={},RiseVision.Financial.Disclaimer=function(){"use strict";function t(){$("#disclaimer").text("Market Data by Thomson Reuters - Delayed 20 Minutes"),$("#disclaimer").addClass("disclaimer_font-style"),$("#disclaimer").addClass("default"),"bottomRight"===e||"bottomLeft"===e?($("#disclaimer").addClass("bottom"),"bottomRight"===e&&$("#disclaimer").addClass("right")):($("#container").addClass("fullScreen"),$("#disclaimer").addClass("top"),"topRight"===e&&$("#disclaimer").addClass("right"))}var e="bottomRight";return{load:t}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Table={},RiseVision.Common.Table=function(t,e,a){this._financial=e,this._data=null,this._urls=[],this._prefs=a,this._additionalParams=t,this._isLoading=!0,this._isChain=!1,this._tableConfig={autoWidth:!1,destroy:!0,searching:!1,info:!1,lengthChange:!1,paging:!1,ordering:!1,scrollY:"500px",scrollCollapse:!0},this._addCommas=function(t){t+="";for(var e=t.split("."),a=e[0],n=e.length>1?"."+e[1]:"",i=/(\d+)(\d{3})/;i.test(a);)a=a.replace(i,"$1,$2");return a+n},this._addHeadings=function(){var t=this,e=document.createElement("tr");$.each(this._additionalParams.columns,function(a,n){var i=document.createElement("th");"logo"===n.id?(i.setAttribute("class","logo"),$(i).html(n.headerText||"Logo")):"instrument"===n.id?(i.setAttribute("class",t._data.getColumnId(0)),$(i).html(n.headerText||t._data.getColumnLabel(0))):(i.setAttribute("class",t._data.getColumnId(t._financial.dataFields[n.id])),$(i).html(n.headerText||t._data.getColumnLabel(t._financial.dataFields[n.id]))),$(i).addClass("heading_font-style"),$(e).append(i)}),$("#financial").prepend($("<thead>").append(e))},this._updateRows=function(){for(var t,e=this,a=this._data.getNumberOfRows(),n=this._data.getNumberOfColumns(),i=0;a>i;i++)t=$("tr[data-alias='"+this._data.getFormattedValue(i,0)+"']:first"),0===t.length&&(t=$("tr[data-alias='N/A']"),0===t.length&&(t=$("tr[data-alias='...']")),t.length>0&&(t.attr("data-alias",this._data.getFormattedValue(i,0)),t.attr("data-code",this._data.getFormattedValue(i,n-1)))),t.length>0&&$.each(this._additionalParams.columns,function(a,n){var o=t.find("."+n.id);if("logo"===n.id)if(null!==e._urls[i]){var r=$("<img>");r.attr("src",e._urls[i]),r.height(t.height()),o.find("div").append(r)}else o.html(e._data.getFormattedValue(i,e._financial.dataFields.name));else"instrument"===n.id?o.html(e._data.getFormattedValue(i,0)):(o.html(e._data.getFormattedValue(i,e._financial.dataFields[n.id])),o.attr("data-value",e._data.getFormattedValue(i,e._financial.dataFields[n.id])))})},this._addRow=function(t,e){var a,n=this,i=-1,o=(this._data.getNumberOfColumns(),!1);"INCORRECT_TYPE"===this._data.getFormattedValue(t,0)?console.log("Chain could not be displayed. Please check that only one chain is being requested and that chains are not being requested together with stocks."):(null===e?(e=document.createElement("tr"),e.setAttribute("class","item"),e.setAttribute("data-alias",this._data.getFormattedValue(t,0)),e.setAttribute("data-code",this._data.getFormattedValue(t,this._financial.dataFields.code)),o=!0):(e.attr("data-alias",this._data.getFormattedValue(t,0)),e.attr("data-code",this._data.getFormattedValue(t,this._financial.dataFields.code))),$(e).on("click",function(){$("tr").removeClass("selected"),$(this).addClass("selected"),gadgets.rpc.call("","instrumentSelected",null,$(this).attr("data-code"))}),$.each(this._additionalParams.columns,function(a,o){var r=document.createElement("td");if("logo"===o.id?(i=a,r.setAttribute("class","data_font-style logo"),$(e).append(r)):"instrument"===o.id?(r.setAttribute("class","data_font-style "+n._data.getColumnId(0)),$(r).html(n._data.getFormattedValue(t,0)),$(e).append(r)):(r.setAttribute("class","data_font-style "+n._data.getColumnId(n._financial.dataFields[o.id])),$(r).html(n._data.getFormattedValue(t,n._financial.dataFields[o.id])),$(r).attr("data-value",n._data.getFormattedValue(t,n._financial.dataFields[o.id])),$(e).append(r)),-1!==i&&a===n._additionalParams.columns.length-1)if(r=$(e).find("td").eq(i),r.attr("class","data_font-style logo"),null!==n._urls[t]){var s=$("<img>");s.attr("src",n._urls[t]),s.height(0),$(r).append(s)}else $(r).html(n._data.getFormattedValue(t,n._financial.dataFields.name))}),o&&$("#financial").append(e),$(".logo img").height($(e).height()),"N/P"===this._data.getFormattedValue(t,this._financial.dataFields.name)&&(a=this._additionalParams.instruments,a.splice(t,1),this._financial.setInstruments(a.join())))},this._formatFields=function(){var t=this;$.each(this._additionalParams.columns,function(e,a){if(a.id){var n,i=$("td."+a.id);i.length>0&&(i.hasClass("updated")||((t._isLoading||t._isChain)&&(a.header&&$("th").eq(e).html(a.header),t._isLoading&&a.width&&(n=parseInt(a.width),n=n/t._prefs.getInt("rsW")*100+"%",a.width=n),$("th").eq(e).css("text-align",a.align)),i.css("text-align",a.align),i.each(function(){var e;if($(this).text()&&!isNaN($(this).text()))if($(this).text(parseFloat($(this).text()).toFixed(a.decimals)),e=$(this).attr("data-value"),e||(e=$(this).text()),"none"===a.sign)$(this).html(t._addCommas(Math.abs(e).toFixed(a.decimals)));else if("neg"===a.sign)$(this).html(t._addCommas(e));else if("pos-neg"===a.sign)parseFloat(e)>0&&$(this).html("+"+t._addCommas(e));else if("bracket"===a.sign)parseFloat(e)<0&&$(this).html("("+t._addCommas(Math.abs(e).toFixed(a.decimals))+")");else if("arrow"===a.sign){var n=$("<img class='arrow'>");n.height($(this).height()),$(this).html(t._addCommas(Math.abs(e).toFixed(a.decimals))),parseFloat(e)<0?n.attr("src",FINANCIAL_TABLE_CONFIG.LOGOS_URL+"animated-red-arrow.gif"):parseFloat(e)>=0&&n.attr("src",FINANCIAL_TABLE_CONFIG.LOGOS_URL+"animated-green-arrow.gif"),$(this).prepend(n)}}),i.addClass("updated")))}}),$("td").removeClass("updated")}},RiseVision.Common.Table.prototype.getInstrument=function(t){return $("tr").removeClass("selected"),$(".item").eq(t).addClass("selected"),$(".item").eq(t).attr("data-code")},RiseVision.Common.Table.prototype.initTable=function(t,e,a,n,i){var o=this;this._data=t,this._urls=e,this._isLoading=a,this._isChain=n;var r=this._data.getNumberOfRows(),s=this._data.getNumberOfColumns();if(this._isLoading||this._isChain){s>0&&this._addHeadings();for(var l=0;r>l;l++)$(".repeat").eq(l).length>0?this._addRow(l,$(".repeat").eq(l)):this._addRow(l,null);-1!==i&&$(".item").eq(i).addClass("selected")}else this._updateRows();this._formatFields(),(this._isLoading||this._isChain)&&(this._tableConfig.columnDefs=[],$.each(this._additionalParams.columns,function(t,e){e.width&&o._tableConfig.columnDefs.push({width:e.width,targets:[t]})}),$("#financial").dataTable(this._tableConfig),$(".dataTables_scrollHead table thead tr th, td").css({"padding-top":this._additionalParams.table.rowPadding/2+"px","padding-bottom":this._additionalParams.table.rowPadding/2+"px"}),$("table thead tr th, td").css({"padding-left":this._additionalParams.table.colPadding/2+"px","padding-right":this._additionalParams.table.colPadding/2+"px"}),$("table tr th:first-child, td:first-child").css({"padding-left":"10px"}),$("table tr th:last-child, td:last-child").css({"padding-right":"10px"}),$(".dataTables_scrollBody").height($("#container").outerHeight()-$("#disclaimer").outerHeight()-$(".dataTables_scrollHead").outerHeight()+"px")),$.each(this._additionalParams.columns,function(t,e){if("change-up"===e.colorCondition||"change-down"===e.colorCondition){var a=o._financial.compare(e.id);$.each(a,function(t,a){var n=$("td."+e.id).eq(t);"change-up"===e.colorCondition?1===a?n.addClass("changeUpIncrease"):-1===a?n.addClass("changeUpDecrease"):n.removeClass("changeUpIncrease changeUpDecrease"):1===a?n.addClass("changeDownIncrease"):-1===a?n.addClass("changeDownDecrease"):n.removeClass("changeDownIncrease changeDownDecrease")})}else if("value-positive"===e.colorCondition||"value-negative"===e.colorCondition){var a=o._financial.checkSigns(e.id);$.each(a,function(t,a){var n=$("td."+e.id).eq(t);"value-positive"===e.colorCondition?1===a?n.addClass("valuePositivePositive"):n.addClass("valuePositiveNegative"):1===a?n.addClass("valueNegativePositive"):n.addClass("valueNegativeNegative")})}})};var RiseVision=RiseVision||{};RiseVision.Financial=RiseVision.Financial||{},RiseVision.Financial.Table={},RiseVision.Financial.Table=function(t,e,a,n,i){"use strict";function o(){L&&L.table&&n.addCSSRules([n.getFontCssStyle("heading_font-style",L.table.colHeaderFont),n.getFontCssStyle("data_font-style",L.table.dataFont),n.getFontCssStyle("disclaimer_font-style",L.disclaimer.font),".dataTable .even{background-color:"+L.table.rowColor+";}",".dataTable .odd{background-color:"+L.table.altRowColor+";}"])}function r(t){return $("tr").removeClass("selected"),$(".item").eq(t).addClass("selected"),$(".item").eq(t).attr("data-code")}function s(t){var e=[],n=[],i=y.getNumberOfRows();t&&(C=[]);for(var o=0;i>o;o++)e.push(y.getFormattedValue(o,I.dataFields.code));n=$.grep(e,function(t){return-1===$.inArray(t,C)});for(var r=0;r<n.length;r++)C.push(n[r]);n.length>0&&a.rpc.call("","instrumentsChanged",null,w,n),t&&setTimeout(function(){s(!0)},864e5)}function l(t,n){t[0]&&"additionalParams"===t[0]&&n[0]&&(L=JSON.parse(n[0]),e.body.style.background=L.background.color||"transparent",o(),$.each(L.columns,function(t,e){"name"===e.id||"logo"===e.id||"instrument"===e.id||"arrow"===e.id||A.push(e.id),"logo"===e.id&&(V=!0)}),A.push("code"),A.push("name")),t[1]&&"displayId"===t[1]&&(w=n[1]),t[2]&&"companyId"===t[2]&&(x=n[2]),T=new a.Prefs,u()}function u(){R=new RiseVision.Common.Store.Auth,I=new RiseVision.Common.Financial.RealTime(w,L.instruments,R),F=new RiseVision.Common.Table(L,I,T),RiseVision.Financial.Layout.load(function(){c()})}function c(){var t=i.PRODUCT_CODE;w?R.checkForDisplay(w,t,function(){d()}):d()}function d(){R.isAuthorized()||!y?I.getData(A,V,g(),function(t,e){t?(y=t,_=e,$("#container").width(T.getString("rsW")),$("#container").height(T.getString("rsH")),N?RiseVision.Common.ArrowLoader.load(function(){h()}):(g()&&s(!1),h())):p()}):p()}function h(){var t=-1;(N||g())&&(N||$(".dataTables_scrollBody").data("plugin_autoScroll").stop(),t=$(".selected").index(),RiseVision.Financial.Layout.loadLayout(y.getNumberOfRows()),RiseVision.Financial.Disclaimer.load()),F.initTable(y,_,N,g(),t),(N||g())&&$(".dataTables_scrollBody").autoScroll(L.scroll).on("done",function(){f.call()}),$("#container").width("100%"),$("#container").height("95%"),N?(N=!1,m(),s(!0)):$(".dataTables_scrollBody").data("plugin_autoScroll").play(),p()}function f(){"page"!==L.scroll.by&&b(),D&&("page"===L.scroll.by?(D=!1,d()):(D=!1,d()))}function p(){setTimeout(function(){"none"!==L.scroll.by&&$(".dataTables_scrollBody").data("plugin_autoScroll").canScroll()?D=!0:d()},P)}function g(){var t=L.instruments;return null!==y?1===t.length&&y.getNumberOfRows()>1:!1}function m(){a.rpc.call("","rsevent_ready",null,T.getString("id"),!0,!0,!0,!0,!0)}function b(){a.rpc.call("","rsevent_done",null,T.getString("id"))}function v(){$(".dataTables_scrollBody").data("plugin_autoScroll").play()}function S(){$(".dataTables_scrollBody").data("plugin_autoScroll").pause()}var y,_,C,D,T=null,w="",x="",R=null,I=null,F=null,L=null,A=[],V=!1,P=6e4,N=!0;return{setParams:l,pause:S,play:v,getInstrument:r}}(window,document,gadgets,RiseVision.Common.Utilities,FINANCIAL_TABLE_CONFIG);
//# sourceMappingURL=data:application/json;base64,